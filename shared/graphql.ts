/* DO NOT EDIT! this file was generated by graphql-codegen */
/* eslint-disable */
import { useMutation, UseMutationOptions, useQuery, UseQueryOptions } from 'react-query';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/graphql` as string, {
      method: "POST",
      headers: {"Content-Type":"application/json"},
      body: JSON.stringify({ query, variables }),
    });
    
    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
};

export type Alias = {
  __typename?: 'Alias';
  createdAt: Scalars['DateTime'];
  id: Scalars['Int'];
  name: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};

export type AliasListRelationFilter = {
  every?: Maybe<AliasWhereInput>;
  none?: Maybe<AliasWhereInput>;
  some?: Maybe<AliasWhereInput>;
};

export type AliasPersonAliasCompoundUniqueInput = {
  name: Scalars['String'];
  personId: Scalars['Int'];
};

export type AliasWhereInput = {
  AND?: Maybe<Array<AliasWhereInput>>;
  NOT?: Maybe<Array<AliasWhereInput>>;
  OR?: Maybe<Array<AliasWhereInput>>;
  createdAt?: Maybe<DateTimeFilter>;
  id?: Maybe<IntFilter>;
  name?: Maybe<StringFilter>;
  person?: Maybe<PersonWhereInput>;
  personId?: Maybe<IntFilter>;
  preferredAliasOf?: Maybe<PersonWhereInput>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type AliasWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
  personAlias?: Maybe<AliasPersonAliasCompoundUniqueInput>;
};

export type Appearance = {
  __typename?: 'Appearance';
  addedBy: User;
  createdAt: Scalars['DateTime'];
  faces: Array<Face>;
  id: Scalars['Int'];
  image: Image;
  person: Person;
  updatedAt: Scalars['DateTime'];
};


export type AppearanceFacesArgs = {
  cursor?: Maybe<FaceWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};

export type AppearanceAppearanceCompoundUniqueInput = {
  imageId: Scalars['Int'];
  personId: Scalars['Int'];
};

export type AppearanceListRelationFilter = {
  every?: Maybe<AppearanceWhereInput>;
  none?: Maybe<AppearanceWhereInput>;
  some?: Maybe<AppearanceWhereInput>;
};

export type AppearanceWhereInput = {
  AND?: Maybe<Array<AppearanceWhereInput>>;
  NOT?: Maybe<Array<AppearanceWhereInput>>;
  OR?: Maybe<Array<AppearanceWhereInput>>;
  addedBy?: Maybe<UserWhereInput>;
  addedById?: Maybe<IntFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  faces?: Maybe<FaceListRelationFilter>;
  id?: Maybe<IntFilter>;
  image?: Maybe<ImageWhereInput>;
  imageId?: Maybe<IntFilter>;
  person?: Maybe<PersonWhereInput>;
  personId?: Maybe<IntFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type AppearanceWhereUniqueInput = {
  appearance?: Maybe<AppearanceAppearanceCompoundUniqueInput>;
  id?: Maybe<Scalars['Int']>;
};

export type BoolFilter = {
  equals?: Maybe<Scalars['Boolean']>;
  not?: Maybe<NestedBoolFilter>;
};


export type DateTimeFilter = {
  equals?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeFilter>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
};

export type DateTimeNullableFilter = {
  equals?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeNullableFilter>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
};

export type EnumFaceSourceFilter = {
  equals?: Maybe<FaceSource>;
  in?: Maybe<Array<FaceSource>>;
  not?: Maybe<NestedEnumFaceSourceFilter>;
  notIn?: Maybe<Array<FaceSource>>;
};

export type EnumMimeTypeFilter = {
  equals?: Maybe<MimeType>;
  in?: Maybe<Array<MimeType>>;
  not?: Maybe<NestedEnumMimeTypeFilter>;
  notIn?: Maybe<Array<MimeType>>;
};

export type EnumTagSourceFilter = {
  equals?: Maybe<TagSource>;
  in?: Maybe<Array<TagSource>>;
  not?: Maybe<NestedEnumTagSourceFilter>;
  notIn?: Maybe<Array<TagSource>>;
};

export type EnumUploadTypeFilter = {
  equals?: Maybe<UploadType>;
  in?: Maybe<Array<UploadType>>;
  not?: Maybe<NestedEnumUploadTypeFilter>;
  notIn?: Maybe<Array<UploadType>>;
};

export type Face = {
  __typename?: 'Face';
  addedBy?: Maybe<User>;
  appearance?: Maybe<Appearance>;
  createdAt: Scalars['DateTime'];
  height: Scalars['Float'];
  id: Scalars['Int'];
  image: Image;
  score: Scalars['Float'];
  source: FaceSource;
  updatedAt: Scalars['DateTime'];
  width: Scalars['Float'];
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type FaceListRelationFilter = {
  every?: Maybe<FaceWhereInput>;
  none?: Maybe<FaceWhereInput>;
  some?: Maybe<FaceWhereInput>;
};

export enum FaceSource {
  Manual = 'Manual',
  Scan = 'Scan'
}

export type FaceWhereInput = {
  AND?: Maybe<Array<FaceWhereInput>>;
  NOT?: Maybe<Array<FaceWhereInput>>;
  OR?: Maybe<Array<FaceWhereInput>>;
  addedBy?: Maybe<UserWhereInput>;
  addedById?: Maybe<IntNullableFilter>;
  appearance?: Maybe<AppearanceWhereInput>;
  appearanceId?: Maybe<IntNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  height?: Maybe<FloatFilter>;
  id?: Maybe<IntFilter>;
  image?: Maybe<ImageWhereInput>;
  imageId?: Maybe<IntFilter>;
  person?: Maybe<PersonWhereInput>;
  personId?: Maybe<IntNullableFilter>;
  score?: Maybe<FloatFilter>;
  source?: Maybe<EnumFaceSourceFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  width?: Maybe<FloatFilter>;
  x?: Maybe<FloatFilter>;
  y?: Maybe<FloatFilter>;
};

export type FaceWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
};

export type FloatFilter = {
  equals?: Maybe<Scalars['Float']>;
  gt?: Maybe<Scalars['Float']>;
  gte?: Maybe<Scalars['Float']>;
  in?: Maybe<Array<Scalars['Float']>>;
  lt?: Maybe<Scalars['Float']>;
  lte?: Maybe<Scalars['Float']>;
  not?: Maybe<NestedFloatFilter>;
  notIn?: Maybe<Array<Scalars['Float']>>;
};

export type Group = {
  __typename?: 'Group';
  aliases: Array<GroupAlias>;
  avatar?: Maybe<Image>;
  banner?: Maybe<Image>;
  createdAt: Scalars['DateTime'];
  id: Scalars['Int'];
  members: Array<GroupMember>;
  name: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};


export type GroupAliasesArgs = {
  cursor?: Maybe<GroupAliasWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};


export type GroupMembersArgs = {
  cursor?: Maybe<GroupMemberWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};

export type GroupAlias = {
  __typename?: 'GroupAlias';
  createdAt: Scalars['DateTime'];
  id: Scalars['Int'];
  name: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};

export type GroupAliasListRelationFilter = {
  every?: Maybe<GroupAliasWhereInput>;
  none?: Maybe<GroupAliasWhereInput>;
  some?: Maybe<GroupAliasWhereInput>;
};

export type GroupAliasWhereInput = {
  AND?: Maybe<Array<GroupAliasWhereInput>>;
  NOT?: Maybe<Array<GroupAliasWhereInput>>;
  OR?: Maybe<Array<GroupAliasWhereInput>>;
  createdAt?: Maybe<DateTimeFilter>;
  group?: Maybe<GroupWhereInput>;
  groupId?: Maybe<IntFilter>;
  id?: Maybe<IntFilter>;
  name?: Maybe<StringFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type GroupAliasWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
};

export type GroupMember = {
  __typename?: 'GroupMember';
  createdAt: Scalars['DateTime'];
  endDate?: Maybe<Scalars['DateTime']>;
  group: Group;
  id: Scalars['Int'];
  person: Person;
  startDate?: Maybe<Scalars['DateTime']>;
  updatedAt: Scalars['DateTime'];
};

export type GroupMemberListRelationFilter = {
  every?: Maybe<GroupMemberWhereInput>;
  none?: Maybe<GroupMemberWhereInput>;
  some?: Maybe<GroupMemberWhereInput>;
};

export type GroupMemberMemberCompoundUniqueInput = {
  groupId: Scalars['Int'];
  personId: Scalars['Int'];
};

export type GroupMemberWhereInput = {
  AND?: Maybe<Array<GroupMemberWhereInput>>;
  NOT?: Maybe<Array<GroupMemberWhereInput>>;
  OR?: Maybe<Array<GroupMemberWhereInput>>;
  createdAt?: Maybe<DateTimeFilter>;
  endDate?: Maybe<DateTimeNullableFilter>;
  group?: Maybe<GroupWhereInput>;
  groupId?: Maybe<IntFilter>;
  id?: Maybe<IntFilter>;
  person?: Maybe<PersonWhereInput>;
  personId?: Maybe<IntFilter>;
  preferredMemberships_?: Maybe<PersonListRelationFilter>;
  startDate?: Maybe<DateTimeNullableFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type GroupMemberWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
  member?: Maybe<GroupMemberMemberCompoundUniqueInput>;
};

export type GroupOrderByInput = {
  avatarId?: Maybe<SortOrder>;
  bannerId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  ireneBotId?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

export type GroupWhereInput = {
  AND?: Maybe<Array<GroupWhereInput>>;
  NOT?: Maybe<Array<GroupWhereInput>>;
  OR?: Maybe<Array<GroupWhereInput>>;
  aliases?: Maybe<GroupAliasListRelationFilter>;
  avatar?: Maybe<ImageWhereInput>;
  avatarId?: Maybe<IntNullableFilter>;
  banner?: Maybe<ImageWhereInput>;
  bannerId?: Maybe<IntNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  id?: Maybe<IntFilter>;
  ireneBotId?: Maybe<IntNullableFilter>;
  members?: Maybe<GroupMemberListRelationFilter>;
  name?: Maybe<StringFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type GroupWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
  ireneBotId?: Maybe<Scalars['Int']>;
};

export type Image = {
  __typename?: 'Image';
  appearances: Array<Appearance>;
  /** The aspect ratio of the image */
  aspectRatio: Scalars['Float'];
  bytes: Scalars['Int'];
  caption?: Maybe<Scalars['String']>;
  /** A graph of connections people in this image share with others based on images they appear together in up to a depth of 4 */
  connections: ImageConnections;
  createdAt: Scalars['DateTime'];
  faceScanDate?: Maybe<Scalars['DateTime']>;
  /** The name the image file was uploaded with. */
  fileName?: Maybe<Scalars['String']>;
  /** Human readable file size. Use `bytes` for a number representation. */
  fileSize: Scalars['String'];
  /** SHA256 checksum of the image. */
  hash: Scalars['String'];
  /** Height of the image in pixels. */
  height: Scalars['Int'];
  id: Scalars['Int'];
  /** ( ͡° ͜ʖ ͡°) */
  isNsfw: Scalars['Boolean'];
  /** False if not logged in */
  liked?: Maybe<Scalars['Boolean']>;
  /** The IANA media type of the image. */
  mimetype: MimeType;
  /** Block hash of the image, useful for doing reverse search using hamming distance. */
  pHash?: Maybe<Scalars['String']>;
  /** Dominant colors in the image in decimal format, sorted by frequency. */
  palette: Array<Scalars['Int']>;
  /** The visibility status of the image. */
  public: Scalars['Boolean'];
  /** Direct link to the image on the CDN */
  rawUrl: Scalars['String'];
  /** The unique url identifier of the image. */
  slug: Scalars['String'];
  /** The url the image was taken from (if applicable). Not guaranteed to be a direct image url. */
  source?: Maybe<Scalars['String']>;
  tags: Array<Tag>;
  thumbnail: Thumbnail;
  unknownFaces: Array<Face>;
  uploadType: UploadType;
  uploadedBy?: Maybe<User>;
  /** Link to the image on the site */
  url: Scalars['String'];
  views: Scalars['Int'];
  /** Width of the image in pixels. */
  width: Scalars['Int'];
};


export type ImageAppearancesArgs = {
  cursor?: Maybe<AppearanceWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};


export type ImageConnectionsArgs = {
  depth?: Scalars['Int'];
};


export type ImageTagsArgs = {
  cursor?: Maybe<TagWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};

export enum ImageConnectionEdge {
  ImageToPerson = 'IMAGE_TO_PERSON',
  PersonToImage = 'PERSON_TO_IMAGE'
}

export type ImageConnections = {
  __typename?: 'ImageConnections';
  edges: Array<ImageEdge>;
  images: Array<Image>;
  people: Array<Person>;
};

export type ImageEdge = {
  __typename?: 'ImageEdge';
  from: Scalars['Int'];
  to: Scalars['Int'];
  type?: Maybe<ImageConnectionEdge>;
};

export type ImageLikeListRelationFilter = {
  every?: Maybe<ImageLikeWhereInput>;
  none?: Maybe<ImageLikeWhereInput>;
  some?: Maybe<ImageLikeWhereInput>;
};

export type ImageLikeWhereInput = {
  AND?: Maybe<Array<ImageLikeWhereInput>>;
  NOT?: Maybe<Array<ImageLikeWhereInput>>;
  OR?: Maybe<Array<ImageLikeWhereInput>>;
  createdAt?: Maybe<DateTimeFilter>;
  id?: Maybe<IntFilter>;
  image?: Maybe<ImageWhereInput>;
  imageId?: Maybe<IntFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  user?: Maybe<UserWhereInput>;
  userId?: Maybe<IntFilter>;
};

export type ImageListRelationFilter = {
  every?: Maybe<ImageWhereInput>;
  none?: Maybe<ImageWhereInput>;
  some?: Maybe<ImageWhereInput>;
};

export type ImageOrderByInput = {
  bytes?: Maybe<SortOrder>;
  caption?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  faceScanDate?: Maybe<SortOrder>;
  faceScanRequestDate?: Maybe<SortOrder>;
  fileName?: Maybe<SortOrder>;
  hash?: Maybe<SortOrder>;
  height?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  ireneBotId?: Maybe<SortOrder>;
  isNsfw?: Maybe<SortOrder>;
  mimetype?: Maybe<SortOrder>;
  pHash?: Maybe<SortOrder>;
  palette?: Maybe<SortOrder>;
  public?: Maybe<SortOrder>;
  slug?: Maybe<SortOrder>;
  source?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  uploadType?: Maybe<SortOrder>;
  userId?: Maybe<SortOrder>;
  views?: Maybe<SortOrder>;
  width?: Maybe<SortOrder>;
};

export type ImageWhereInput = {
  AND?: Maybe<Array<ImageWhereInput>>;
  NOT?: Maybe<Array<ImageWhereInput>>;
  OR?: Maybe<Array<ImageWhereInput>>;
  appearances?: Maybe<AppearanceListRelationFilter>;
  avatarOf?: Maybe<GroupWhereInput>;
  bannerOf?: Maybe<GroupWhereInput>;
  bytes?: Maybe<IntFilter>;
  caption?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  faceScanDate?: Maybe<DateTimeNullableFilter>;
  faceScanRequestDate?: Maybe<DateTimeNullableFilter>;
  faces?: Maybe<FaceListRelationFilter>;
  fileName?: Maybe<StringNullableFilter>;
  hash?: Maybe<StringFilter>;
  height?: Maybe<IntFilter>;
  id?: Maybe<IntFilter>;
  ireneBotId?: Maybe<IntNullableFilter>;
  isNsfw?: Maybe<BoolFilter>;
  likes?: Maybe<ImageLikeListRelationFilter>;
  mimetype?: Maybe<EnumMimeTypeFilter>;
  pHash?: Maybe<StringNullableFilter>;
  palette?: Maybe<IntNullableListFilter>;
  public?: Maybe<BoolFilter>;
  slug?: Maybe<StringFilter>;
  source?: Maybe<StringNullableFilter>;
  tags?: Maybe<TagListRelationFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  uploadType?: Maybe<EnumUploadTypeFilter>;
  user?: Maybe<UserWhereInput>;
  userId?: Maybe<IntNullableFilter>;
  views?: Maybe<IntFilter>;
  width?: Maybe<IntFilter>;
};

export type ImageWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
  ireneBotId?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type IntFilter = {
  equals?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntFilter>;
  notIn?: Maybe<Array<Scalars['Int']>>;
};

export type IntNullableFilter = {
  equals?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntNullableFilter>;
  notIn?: Maybe<Array<Scalars['Int']>>;
};

export type IntNullableListFilter = {
  equals?: Maybe<Array<Scalars['Int']>>;
  has?: Maybe<Scalars['Int']>;
  hasEvery?: Maybe<Array<Scalars['Int']>>;
  hasSome?: Maybe<Array<Scalars['Int']>>;
  isEmpty?: Maybe<Scalars['Boolean']>;
};

export enum MimeType {
  Avif = 'AVIF',
  Gif = 'GIF',
  Jpg = 'JPG',
  Mp4 = 'MP4',
  Png = 'PNG',
  Svg = 'SVG',
  Webm = 'WEBM',
  Webp = 'WEBP'
}

export type Mutation = {
  __typename?: 'Mutation';
  /** Add an appearance relation on an image. */
  addAppearance: Appearance;
  /** Attach an existing face to an apperance. */
  linkFace: Appearance;
  /** Removes an appearance from an image */
  removeAppearance: Appearance;
  /** Queue an image to get scanned for faces */
  scanFaces: QueueInfo;
  toggleLike: Image;
  /** Unlinks an existing face from an appearance. This dissociates the face from the appearance but does not remove the face data */
  unlinkFace: Scalars['Int'];
};


export type MutationAddAppearanceArgs = {
  imageId: Scalars['Int'];
  personId: Scalars['Int'];
};


export type MutationLinkFaceArgs = {
  appearanceId: Scalars['Int'];
  faceId: Scalars['Int'];
};


export type MutationRemoveAppearanceArgs = {
  appearanceId: Scalars['Int'];
};


export type MutationScanFacesArgs = {
  slug: Scalars['String'];
};


export type MutationToggleLikeArgs = {
  imageId: Scalars['Int'];
};


export type MutationUnlinkFaceArgs = {
  appearanceId: Scalars['Int'];
  faceId: Scalars['Int'];
};

export type NestedBoolFilter = {
  equals?: Maybe<Scalars['Boolean']>;
  not?: Maybe<NestedBoolFilter>;
};

export type NestedDateTimeFilter = {
  equals?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeFilter>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
};

export type NestedDateTimeNullableFilter = {
  equals?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeNullableFilter>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
};

export type NestedEnumFaceSourceFilter = {
  equals?: Maybe<FaceSource>;
  in?: Maybe<Array<FaceSource>>;
  not?: Maybe<NestedEnumFaceSourceFilter>;
  notIn?: Maybe<Array<FaceSource>>;
};

export type NestedEnumMimeTypeFilter = {
  equals?: Maybe<MimeType>;
  in?: Maybe<Array<MimeType>>;
  not?: Maybe<NestedEnumMimeTypeFilter>;
  notIn?: Maybe<Array<MimeType>>;
};

export type NestedEnumTagSourceFilter = {
  equals?: Maybe<TagSource>;
  in?: Maybe<Array<TagSource>>;
  not?: Maybe<NestedEnumTagSourceFilter>;
  notIn?: Maybe<Array<TagSource>>;
};

export type NestedEnumUploadTypeFilter = {
  equals?: Maybe<UploadType>;
  in?: Maybe<Array<UploadType>>;
  not?: Maybe<NestedEnumUploadTypeFilter>;
  notIn?: Maybe<Array<UploadType>>;
};

export type NestedFloatFilter = {
  equals?: Maybe<Scalars['Float']>;
  gt?: Maybe<Scalars['Float']>;
  gte?: Maybe<Scalars['Float']>;
  in?: Maybe<Array<Scalars['Float']>>;
  lt?: Maybe<Scalars['Float']>;
  lte?: Maybe<Scalars['Float']>;
  not?: Maybe<NestedFloatFilter>;
  notIn?: Maybe<Array<Scalars['Float']>>;
};

export type NestedIntFilter = {
  equals?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntFilter>;
  notIn?: Maybe<Array<Scalars['Int']>>;
};

export type NestedIntNullableFilter = {
  equals?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntNullableFilter>;
  notIn?: Maybe<Array<Scalars['Int']>>;
};

export type NestedStringFilter = {
  contains?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  equals?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  not?: Maybe<NestedStringFilter>;
  notIn?: Maybe<Array<Scalars['String']>>;
  startsWith?: Maybe<Scalars['String']>;
};

export type NestedStringNullableFilter = {
  contains?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  equals?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  not?: Maybe<NestedStringNullableFilter>;
  notIn?: Maybe<Array<Scalars['String']>>;
  startsWith?: Maybe<Scalars['String']>;
};

export type Person = {
  __typename?: 'Person';
  aliases: Array<Alias>;
  appearances: Array<Appearance>;
  createdAt: Scalars['DateTime'];
  faces: Array<Face>;
  id: Scalars['Int'];
  memberOf: Array<GroupMember>;
  name: Scalars['String'];
  preferredAlias?: Maybe<Alias>;
  preferredMembership?: Maybe<GroupMember>;
  updatedAt: Scalars['DateTime'];
};


export type PersonAliasesArgs = {
  cursor?: Maybe<AliasWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};


export type PersonAppearancesArgs = {
  cursor?: Maybe<AppearanceWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};


export type PersonFacesArgs = {
  cursor?: Maybe<FaceWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};


export type PersonMemberOfArgs = {
  cursor?: Maybe<GroupMemberWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};

export type PersonListRelationFilter = {
  every?: Maybe<PersonWhereInput>;
  none?: Maybe<PersonWhereInput>;
  some?: Maybe<PersonWhereInput>;
};

export type PersonWhereInput = {
  AND?: Maybe<Array<PersonWhereInput>>;
  NOT?: Maybe<Array<PersonWhereInput>>;
  OR?: Maybe<Array<PersonWhereInput>>;
  aliases?: Maybe<AliasListRelationFilter>;
  appearances?: Maybe<AppearanceListRelationFilter>;
  appearsIn?: Maybe<FaceListRelationFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  description?: Maybe<StringNullableFilter>;
  id?: Maybe<IntFilter>;
  ireneBotId?: Maybe<IntNullableFilter>;
  memberOf?: Maybe<GroupMemberListRelationFilter>;
  name?: Maybe<StringFilter>;
  preferredAlias?: Maybe<AliasWhereInput>;
  preferredAliasId?: Maybe<IntNullableFilter>;
  preferredMembership?: Maybe<GroupMemberWhereInput>;
  preferredMembershipId?: Maybe<IntNullableFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type PersonWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
  ireneBotId?: Maybe<Scalars['Int']>;
};

export type Query = {
  __typename?: 'Query';
  group?: Maybe<Group>;
  groups: Array<Group>;
  /** Find a single image by its slug. */
  image?: Maybe<Image>;
  imageConnections?: Maybe<ImageConnections>;
  images: Array<Image>;
  me?: Maybe<User>;
  people: Array<Person>;
  person?: Maybe<Person>;
  user?: Maybe<User>;
};


export type QueryGroupArgs = {
  where: GroupWhereUniqueInput;
};


export type QueryGroupsArgs = {
  cursor?: Maybe<GroupWhereUniqueInput>;
  orderBy?: Maybe<Array<GroupOrderByInput>>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
  where?: Maybe<GroupWhereInput>;
};


export type QueryImageArgs = {
  slug: Scalars['String'];
};


export type QueryImageConnectionsArgs = {
  depth?: Scalars['Int'];
  slug: Scalars['String'];
};


export type QueryImagesArgs = {
  cursor?: Maybe<ImageWhereUniqueInput>;
  orderBy?: Maybe<Array<ImageOrderByInput>>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
  where?: Maybe<ImageWhereInput>;
};


export type QueryPeopleArgs = {
  cursor?: Maybe<PersonWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
  where?: Maybe<PersonWhereInput>;
};


export type QueryPersonArgs = {
  where: PersonWhereUniqueInput;
};


export type QueryUserArgs = {
  id?: Maybe<Scalars['Int']>;
};

export enum QueryMode {
  Default = 'default',
  Insensitive = 'insensitive'
}

export type QueueInfo = {
  __typename?: 'QueueInfo';
  queueSize: Scalars['Int'];
};

export type Role = {
  __typename?: 'Role';
  createdAt: Scalars['DateTime'];
  name: Scalars['String'];
};

export type RoleListRelationFilter = {
  every?: Maybe<RoleWhereInput>;
  none?: Maybe<RoleWhereInput>;
  some?: Maybe<RoleWhereInput>;
};

export type RoleUserRoleCompoundUniqueInput = {
  name: Scalars['String'];
  userId: Scalars['Int'];
};

export type RoleWhereInput = {
  AND?: Maybe<Array<RoleWhereInput>>;
  NOT?: Maybe<Array<RoleWhereInput>>;
  OR?: Maybe<Array<RoleWhereInput>>;
  createdAt?: Maybe<DateTimeFilter>;
  id?: Maybe<IntFilter>;
  name?: Maybe<StringFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  user?: Maybe<UserWhereInput>;
  userId?: Maybe<IntFilter>;
};

export type RoleWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
  userRole?: Maybe<RoleUserRoleCompoundUniqueInput>;
};

export enum SortOrder {
  Asc = 'asc',
  Desc = 'desc'
}

export type StringFilter = {
  contains?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  equals?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  mode?: Maybe<QueryMode>;
  not?: Maybe<NestedStringFilter>;
  notIn?: Maybe<Array<Scalars['String']>>;
  startsWith?: Maybe<Scalars['String']>;
};

export type StringNullableFilter = {
  contains?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  equals?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  mode?: Maybe<QueryMode>;
  not?: Maybe<NestedStringNullableFilter>;
  notIn?: Maybe<Array<Scalars['String']>>;
  startsWith?: Maybe<Scalars['String']>;
};

export type Tag = {
  __typename?: 'Tag';
  addedBy?: Maybe<User>;
  createdAt: Scalars['DateTime'];
  name: Scalars['String'];
  source: TagSource;
};

export type TagListRelationFilter = {
  every?: Maybe<TagWhereInput>;
  none?: Maybe<TagWhereInput>;
  some?: Maybe<TagWhereInput>;
};

export enum TagSource {
  User = 'USER'
}

export type TagWhereInput = {
  AND?: Maybe<Array<TagWhereInput>>;
  NOT?: Maybe<Array<TagWhereInput>>;
  OR?: Maybe<Array<TagWhereInput>>;
  addedBy?: Maybe<UserWhereInput>;
  addedById?: Maybe<IntNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  id?: Maybe<IntFilter>;
  image?: Maybe<ImageWhereInput>;
  imageId?: Maybe<IntFilter>;
  name?: Maybe<StringFilter>;
  source?: Maybe<EnumTagSourceFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type TagWhereUniqueInput = {
  id?: Maybe<Scalars['Int']>;
};

/** Preview urls of an image */
export type Thumbnail = {
  __typename?: 'Thumbnail';
  large: Scalars['String'];
  medium: Scalars['String'];
  small: Scalars['String'];
};

export enum UploadType {
  Token = 'TOKEN',
  Website = 'WEBSITE'
}

export type User = {
  __typename?: 'User';
  avatar?: Maybe<Scalars['String']>;
  bot: Scalars['Boolean'];
  id: Scalars['Int'];
  images: Array<Image>;
  name?: Maybe<Scalars['String']>;
  roles: Array<Role>;
};


export type UserImagesArgs = {
  cursor?: Maybe<ImageWhereUniqueInput>;
  orderBy?: Maybe<Array<ImageOrderByInput>>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
  where?: Maybe<ImageWhereInput>;
};


export type UserRolesArgs = {
  cursor?: Maybe<RoleWhereUniqueInput>;
  skip?: Maybe<Scalars['Int']>;
  take?: Maybe<Scalars['Int']>;
};

export type UserWhereInput = {
  AND?: Maybe<Array<UserWhereInput>>;
  NOT?: Maybe<Array<UserWhereInput>>;
  OR?: Maybe<Array<UserWhereInput>>;
  bot?: Maybe<BoolFilter>;
  cratedTags?: Maybe<TagListRelationFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  email?: Maybe<StringNullableFilter>;
  emailVerified?: Maybe<DateTimeNullableFilter>;
  id?: Maybe<IntFilter>;
  image?: Maybe<StringNullableFilter>;
  imageLikes?: Maybe<ImageLikeListRelationFilter>;
  images?: Maybe<ImageListRelationFilter>;
  markedFaces?: Maybe<FaceListRelationFilter>;
  name?: Maybe<StringNullableFilter>;
  roles?: Maybe<RoleListRelationFilter>;
  taggedAppearances?: Maybe<AppearanceListRelationFilter>;
  token?: Maybe<StringNullableFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
};

export type AddToQueueMutationVariables = Exact<{
  slug: Scalars['String'];
}>;


export type AddToQueueMutation = (
  { __typename?: 'Mutation' }
  & { scanFaces: (
    { __typename?: 'QueueInfo' }
    & Pick<QueueInfo, 'queueSize'>
  ) }
);

export type OneImageQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type OneImageQuery = (
  { __typename?: 'Query' }
  & { image?: Maybe<(
    { __typename?: 'Image' }
    & Pick<Image, 'liked' | 'faceScanDate'>
    & { unknownFaces: Array<(
      { __typename?: 'Face' }
      & { appearance?: Maybe<(
        { __typename?: 'Appearance' }
        & AppearanceDataFragment
      )> }
      & FaceDataFragment
    )>, appearances: Array<(
      { __typename?: 'Appearance' }
      & Pick<Appearance, 'id'>
      & { person: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'name'>
      ), faces: Array<(
        { __typename?: 'Face' }
        & FaceDataFragment
      )> }
    )>, uploadedBy?: Maybe<(
      { __typename?: 'User' }
      & { roles: Array<(
        { __typename?: 'Role' }
        & UserRoleDataFragment
      )> }
      & UserDataFragment
    )> }
    & ImageDataFragment
  )> }
);

export type PersonPageQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type PersonPageQuery = (
  { __typename?: 'Query' }
  & { person?: Maybe<(
    { __typename?: 'Person' }
    & Pick<Person, 'name'>
    & { aliases: Array<(
      { __typename?: 'Alias' }
      & Pick<Alias, 'name'>
    )>, preferredAlias?: Maybe<(
      { __typename?: 'Alias' }
      & Pick<Alias, 'name'>
    )>, appearances: Array<(
      { __typename?: 'Appearance' }
      & Pick<Appearance, 'createdAt'>
      & { image: (
        { __typename?: 'Image' }
        & { thumbnail: (
          { __typename?: 'Thumbnail' }
          & Pick<Thumbnail, 'medium'>
        ) }
        & ImageDataFragment
      ) }
    )> }
  )> }
);

export type AppearanceDataFragment = (
  { __typename?: 'Appearance' }
  & Pick<Appearance, 'id'>
  & { person: (
    { __typename?: 'Person' }
    & Pick<Person, 'id' | 'name'>
  ) }
);

export type ConnectionGraphQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type ConnectionGraphQuery = (
  { __typename?: 'Query' }
  & { imageConnections?: Maybe<(
    { __typename?: 'ImageConnections' }
    & { edges: Array<(
      { __typename?: 'ImageEdge' }
      & Pick<ImageEdge, 'type' | 'to' | 'from'>
    )>, people: Array<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'name'>
    )>, images: Array<(
      { __typename?: 'Image' }
      & Pick<Image, 'slug' | 'id' | 'rawUrl'>
    )> }
  )> }
);

export type FaceDataFragment = (
  { __typename?: 'Face' }
  & Pick<Face, 'id' | 'x' | 'y' | 'width' | 'height' | 'score'>
);

export type HomepageQueryVariables = Exact<{
  take: Scalars['Int'];
  skip: Scalars['Int'];
}>;


export type HomepageQuery = (
  { __typename?: 'Query' }
  & { images: Array<(
    { __typename?: 'Image' }
    & GridImageFragment
  )> }
);

export type ImageDataFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'id' | 'height' | 'width' | 'isNsfw' | 'url' | 'rawUrl' | 'createdAt' | 'caption' | 'public' | 'source' | 'slug' | 'bytes' | 'mimetype' | 'palette'>
  & { tags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'name'>
  )> }
);

export type GridImageFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'id' | 'url' | 'rawUrl' | 'aspectRatio' | 'createdAt'>
  & { thumbnail: (
    { __typename?: 'Thumbnail' }
    & Pick<Thumbnail, 'small'>
  ), uploadedBy?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name'>
  )>, appearances: Array<(
    { __typename?: 'Appearance' }
    & Pick<Appearance, 'id'>
    & { person: (
      { __typename?: 'Person' }
      & Pick<Person, 'name'>
    ) }
  )> }
);

export type AppearanceWithFacesFragment = (
  { __typename?: 'Appearance' }
  & Pick<Appearance, 'id'>
  & { faces: Array<(
    { __typename?: 'Face' }
    & FaceDataFragment
  )>, person: (
    { __typename?: 'Person' }
    & Pick<Person, 'name'>
  ) }
);

export type AddAppearanceMutationVariables = Exact<{
  imageId: Scalars['Int'];
  personId: Scalars['Int'];
}>;


export type AddAppearanceMutation = (
  { __typename?: 'Mutation' }
  & { appearance: (
    { __typename?: 'Appearance' }
    & AppearanceWithFacesFragment
  ) }
);

export type RemoveAppearanceMutationVariables = Exact<{
  appearanceId: Scalars['Int'];
}>;


export type RemoveAppearanceMutation = (
  { __typename?: 'Mutation' }
  & { appearance: (
    { __typename?: 'Appearance' }
    & Pick<Appearance, 'id'>
  ) }
);

export type LinkFaceMutationVariables = Exact<{
  appearanceId: Scalars['Int'];
  faceId: Scalars['Int'];
}>;


export type LinkFaceMutation = (
  { __typename?: 'Mutation' }
  & { appearance: (
    { __typename?: 'Appearance' }
    & AppearanceWithFacesFragment
  ) }
);

export type UnlinkFaceMutationVariables = Exact<{
  appearanceId: Scalars['Int'];
  faceId: Scalars['Int'];
}>;


export type UnlinkFaceMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'unlinkFace'>
);

export type GetUploadResultQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type GetUploadResultQuery = (
  { __typename?: 'Query' }
  & { image?: Maybe<(
    { __typename?: 'Image' }
    & { appearances: Array<(
      { __typename?: 'Appearance' }
      & Pick<Appearance, 'id'>
      & { person: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'name'>
      ), faces: Array<(
        { __typename?: 'Face' }
        & FaceDataFragment
      )> }
    )> }
    & ImageDataFragment
  )> }
);

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = (
  { __typename?: 'Query' }
  & { me?: Maybe<(
    { __typename?: 'User' }
    & { images: Array<(
      { __typename?: 'Image' }
      & GridImageFragment
    )>, roles: Array<(
      { __typename?: 'Role' }
      & UserRoleDataFragment
    )> }
    & UserDataFragment
  )> }
);

export type ToggleLikeMutationVariables = Exact<{
  id: Scalars['Int'];
}>;


export type ToggleLikeMutation = (
  { __typename?: 'Mutation' }
  & { toggleLike: (
    { __typename?: 'Image' }
    & Pick<Image, 'liked'>
    & ImageDataFragment
  ) }
);

export type UserDataFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name' | 'avatar' | 'bot'>
);

export type UserRoleDataFragment = (
  { __typename?: 'Role' }
  & Pick<Role, 'name'>
);

export const AppearanceDataFragmentDoc = `
    fragment AppearanceData on Appearance {
  id
  person {
    id
    name
  }
}
    `;
export const ImageDataFragmentDoc = `
    fragment ImageData on Image {
  id
  height
  width
  isNsfw
  url
  rawUrl
  createdAt
  caption
  public
  source
  slug
  bytes
  mimetype
  palette
  tags {
    name
  }
}
    `;
export const GridImageFragmentDoc = `
    fragment GridImage on Image {
  id
  url
  thumbnail {
    small
  }
  rawUrl
  aspectRatio
  uploadedBy {
    id
    name
  }
  appearances {
    id
    person {
      name
    }
  }
  createdAt
}
    `;
export const FaceDataFragmentDoc = `
    fragment FaceData on Face {
  id
  x
  y
  width
  height
  score
}
    `;
export const AppearanceWithFacesFragmentDoc = `
    fragment AppearanceWithFaces on Appearance {
  id
  faces {
    ...FaceData
  }
  person {
    name
  }
}
    ${FaceDataFragmentDoc}`;
export const UserDataFragmentDoc = `
    fragment UserData on User {
  id
  name
  avatar
  bot
}
    `;
export const UserRoleDataFragmentDoc = `
    fragment UserRoleData on Role {
  name
}
    `;
export const AddToQueueDocument = `
    mutation addToQueue($slug: String!) {
  scanFaces(slug: $slug) {
    queueSize
  }
}
    `;
export const useAddToQueueMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddToQueueMutation, TError, AddToQueueMutationVariables, TContext>) => 
    useMutation<AddToQueueMutation, TError, AddToQueueMutationVariables, TContext>(
      (variables?: AddToQueueMutationVariables) => fetcher<AddToQueueMutation, AddToQueueMutationVariables>(AddToQueueDocument, variables)(),
      options
    );
export const OneImageDocument = `
    query OneImage($slug: String!) {
  image(slug: $slug) {
    unknownFaces {
      ...FaceData
      appearance {
        ...AppearanceData
      }
    }
    appearances {
      id
      person {
        id
        name
      }
      faces {
        ...FaceData
      }
    }
    liked
    uploadedBy {
      ...UserData
      roles {
        ...UserRoleData
      }
    }
    ...ImageData
    faceScanDate
  }
}
    ${FaceDataFragmentDoc}
${AppearanceDataFragmentDoc}
${UserDataFragmentDoc}
${UserRoleDataFragmentDoc}
${ImageDataFragmentDoc}`;
export const useOneImageQuery = <
      TData = OneImageQuery,
      TError = unknown
    >(
      variables: OneImageQueryVariables, 
      options?: UseQueryOptions<OneImageQuery, TError, TData>
    ) => 
    useQuery<OneImageQuery, TError, TData>(
      ['OneImage', variables],
      fetcher<OneImageQuery, OneImageQueryVariables>(OneImageDocument, variables),
      options
    );
export const PersonPageDocument = `
    query personPage($id: Int!) {
  person(where: {id: $id}) {
    name
    aliases {
      name
    }
    preferredAlias {
      name
    }
    appearances {
      image {
        ...ImageData
        thumbnail {
          medium
        }
      }
      createdAt
    }
  }
}
    ${ImageDataFragmentDoc}`;
export const usePersonPageQuery = <
      TData = PersonPageQuery,
      TError = unknown
    >(
      variables: PersonPageQueryVariables, 
      options?: UseQueryOptions<PersonPageQuery, TError, TData>
    ) => 
    useQuery<PersonPageQuery, TError, TData>(
      ['personPage', variables],
      fetcher<PersonPageQuery, PersonPageQueryVariables>(PersonPageDocument, variables),
      options
    );
export const ConnectionGraphDocument = `
    query connectionGraph($slug: String!) {
  imageConnections(depth: 2, slug: $slug) {
    edges {
      type
      to
      from
    }
    people {
      id
      name
    }
    images {
      slug
      id
      rawUrl
    }
  }
}
    `;
export const useConnectionGraphQuery = <
      TData = ConnectionGraphQuery,
      TError = unknown
    >(
      variables: ConnectionGraphQueryVariables, 
      options?: UseQueryOptions<ConnectionGraphQuery, TError, TData>
    ) => 
    useQuery<ConnectionGraphQuery, TError, TData>(
      ['connectionGraph', variables],
      fetcher<ConnectionGraphQuery, ConnectionGraphQueryVariables>(ConnectionGraphDocument, variables),
      options
    );
export const HomepageDocument = `
    query Homepage($take: Int!, $skip: Int!) {
  images(orderBy: {createdAt: desc}, take: $take, skip: $skip) {
    ...GridImage
  }
}
    ${GridImageFragmentDoc}`;
export const useHomepageQuery = <
      TData = HomepageQuery,
      TError = unknown
    >(
      variables: HomepageQueryVariables, 
      options?: UseQueryOptions<HomepageQuery, TError, TData>
    ) => 
    useQuery<HomepageQuery, TError, TData>(
      ['Homepage', variables],
      fetcher<HomepageQuery, HomepageQueryVariables>(HomepageDocument, variables),
      options
    );
export const AddAppearanceDocument = `
    mutation AddAppearance($imageId: Int!, $personId: Int!) {
  appearance: addAppearance(imageId: $imageId, personId: $personId) {
    ...AppearanceWithFaces
  }
}
    ${AppearanceWithFacesFragmentDoc}`;
export const useAddAppearanceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddAppearanceMutation, TError, AddAppearanceMutationVariables, TContext>) => 
    useMutation<AddAppearanceMutation, TError, AddAppearanceMutationVariables, TContext>(
      (variables?: AddAppearanceMutationVariables) => fetcher<AddAppearanceMutation, AddAppearanceMutationVariables>(AddAppearanceDocument, variables)(),
      options
    );
export const RemoveAppearanceDocument = `
    mutation RemoveAppearance($appearanceId: Int!) {
  appearance: removeAppearance(appearanceId: $appearanceId) {
    id
  }
}
    `;
export const useRemoveAppearanceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<RemoveAppearanceMutation, TError, RemoveAppearanceMutationVariables, TContext>) => 
    useMutation<RemoveAppearanceMutation, TError, RemoveAppearanceMutationVariables, TContext>(
      (variables?: RemoveAppearanceMutationVariables) => fetcher<RemoveAppearanceMutation, RemoveAppearanceMutationVariables>(RemoveAppearanceDocument, variables)(),
      options
    );
export const LinkFaceDocument = `
    mutation LinkFace($appearanceId: Int!, $faceId: Int!) {
  appearance: linkFace(faceId: $faceId, appearanceId: $appearanceId) {
    ...AppearanceWithFaces
  }
}
    ${AppearanceWithFacesFragmentDoc}`;
export const useLinkFaceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<LinkFaceMutation, TError, LinkFaceMutationVariables, TContext>) => 
    useMutation<LinkFaceMutation, TError, LinkFaceMutationVariables, TContext>(
      (variables?: LinkFaceMutationVariables) => fetcher<LinkFaceMutation, LinkFaceMutationVariables>(LinkFaceDocument, variables)(),
      options
    );
export const UnlinkFaceDocument = `
    mutation UnlinkFace($appearanceId: Int!, $faceId: Int!) {
  unlinkFace(faceId: $faceId, appearanceId: $appearanceId)
}
    `;
export const useUnlinkFaceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UnlinkFaceMutation, TError, UnlinkFaceMutationVariables, TContext>) => 
    useMutation<UnlinkFaceMutation, TError, UnlinkFaceMutationVariables, TContext>(
      (variables?: UnlinkFaceMutationVariables) => fetcher<UnlinkFaceMutation, UnlinkFaceMutationVariables>(UnlinkFaceDocument, variables)(),
      options
    );
export const GetUploadResultDocument = `
    query getUploadResult($slug: String!) {
  image(slug: $slug) {
    appearances {
      id
      person {
        id
        name
      }
      faces {
        ...FaceData
      }
    }
    ...ImageData
  }
}
    ${FaceDataFragmentDoc}
${ImageDataFragmentDoc}`;
export const useGetUploadResultQuery = <
      TData = GetUploadResultQuery,
      TError = unknown
    >(
      variables: GetUploadResultQueryVariables, 
      options?: UseQueryOptions<GetUploadResultQuery, TError, TData>
    ) => 
    useQuery<GetUploadResultQuery, TError, TData>(
      ['getUploadResult', variables],
      fetcher<GetUploadResultQuery, GetUploadResultQueryVariables>(GetUploadResultDocument, variables),
      options
    );
export const MeDocument = `
    query Me {
  me {
    ...UserData
    images(orderBy: {createdAt: asc}) {
      ...GridImage
    }
    roles {
      ...UserRoleData
    }
  }
}
    ${UserDataFragmentDoc}
${GridImageFragmentDoc}
${UserRoleDataFragmentDoc}`;
export const useMeQuery = <
      TData = MeQuery,
      TError = unknown
    >(
      variables?: MeQueryVariables, 
      options?: UseQueryOptions<MeQuery, TError, TData>
    ) => 
    useQuery<MeQuery, TError, TData>(
      ['Me', variables],
      fetcher<MeQuery, MeQueryVariables>(MeDocument, variables),
      options
    );
export const ToggleLikeDocument = `
    mutation toggleLike($id: Int!) {
  toggleLike(imageId: $id) {
    ...ImageData
    liked
  }
}
    ${ImageDataFragmentDoc}`;
export const useToggleLikeMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleLikeMutation, TError, ToggleLikeMutationVariables, TContext>) => 
    useMutation<ToggleLikeMutation, TError, ToggleLikeMutationVariables, TContext>(
      (variables?: ToggleLikeMutationVariables) => fetcher<ToggleLikeMutation, ToggleLikeMutationVariables>(ToggleLikeDocument, variables)(),
      options
    );
export { fetcher }