generator client {
  provider      = "prisma-client-js"
  // required by alpine linux
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([providerAccountId], name: "provider_account_id")
  @@index([providerId], name: "provider_id")
  @@index([userId], name: "user_id")
  @@map("accounts")
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  source    TagSource
  imageId   Int       @map("image_id")
  addedById Int?      @map("added_by_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  addedBy   User?     @relation(fields: [addedById], references: [id])
  image     Image     @relation(fields: [imageId], references: [id])

  @@index([imageId], name: "image.index")
  @@index([addedById], name: "user.index")
  @@map("tags")
}

model Alias {
  id               Int      @id @default(autoincrement())
  name             String
  person           Person   @relation(fields: [personId], references: [id])
  personId         Int      @map(name: "person_id")
  preferredAliasOf Person?  @relation("preferred_alias")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([personId, name], name: "personAlias")
  @@map("aliases")
}

model Person {
  id               Int          @id @default(autoincrement())
  description      String?
  name             String
  preferredAlias   Alias?       @relation("preferred_alias", fields: [preferredAliasId], references: [id])
  preferredAliasId Int?         @map("preferred_alias_id")
  aliases          Alias[]
  appearsIn        Face[]       @relation("face_person")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")
  ireneBotId       Int?         @unique @map("irene_bot_id")
  appearances      Appearance[]

  @@index([name], name: "person.name.index")
  @@map("persons")
}

model Appearance {
  id        Int    @id @default(autoincrement())
  person    Person @relation(fields: [personId], references: [id])
  personId  Int    @map("person_id")
  // this is an array for the VERY rare cases where
  // a person might have more than one face
  // in a picture like in a collage
  faces     Face[] @relation("apperance_face")
  addedBy   User   @relation(fields: [addedById], references: [id])
  addedById Int    @map(name: "added_by_id")
  image     Image  @relation("image_appearances", fields: [imageId], references: [id])
  imageId   Int    @map(name: "image_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([personId, imageId], name: "appearance")
  @@map("appearances")
}

model Face {
  id           Int                 @id @default(autoincrement())
  x            Float
  y            Float
  height       Float
  width        Float
  // This type is currently not supported.
  descriptor   Unsupported("cube")
  appearanceId Int?                @map("appearance_id")
  addedBy      User?               @relation(fields: [addedById], references: [id])
  addedById    Int?                @map(name: "added_by_id")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @default(now()) @updatedAt @map("updated_at")

  score   Float      @default(0)
  image   Image      @relation(fields: [imageId], references: [id])
  imageId Int        @map(name: "image_id")
  source  FaceSource @default(Manual)

  person     Person?     @relation("face_person", fields: [personId], references: [id])
  personId   Int?        @map(name: "person_id")
  appearance Appearance? @relation("apperance_face", fields: [appearanceId], references: [id])
  @@index([appearanceId], name: "face.appearanceId.index")
  @@map("faces")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sessions")
}

/// A single role that a user has
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @map("role_name")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([name, userId], name: "userRole")
  @@index([userId], name: "roles.user")
  @@map("roles")
}

/// A user
model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  token         String?     @unique
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  images        Image[]
  cratedTags    Tag[]
  roles         Role[]
  imageLikes    ImageLike[]
  bot           Boolean     @default(false)

  taggedAppearances Appearance[]
  markedFaces       Face[]
  @@index([token], name: "user.token.index")
  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("verification_requests")
}

/// An image uploaded by a user or bot
model Image {
  slug         String       @unique
  width        Int
  height       Int
  fileName     String?      @map("file_name")
  uploadType   UploadType   @map("upload_type")
  mimetype     MimeType
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at")
  userId       Int?         @map("user_id")
  id           Int          @id @default(autoincrement())
  hash         String
  pHash        String?      @map("p_hash")
  public       Boolean      @default(false)
  // The decimal representation of the primary colors, sorted by appearance frequency
  palette      Int[]
  caption      String?
  views        Int          @default(0)
  isNsfw       Boolean      @default(false) @map("is_nsfw")
  source       String?
  bytes        Int          @default(0)
  user         User?        @relation(fields: [userId], references: [id])
  appearances  Appearance[] @relation("image_appearances")
  faceScanDate DateTime?    @map("face_scan_date")
  ireneBotId   Int?         @unique
  tags         Tag[]
  faces        Face[]
  likes        ImageLike[]

  @@index([slug], name: "images.slug_index")
  @@map("images")
}

model ImageLike {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  imageId   Int      @map("image_id")
  image     Image    @relation(fields: [imageId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, imageId], name: "likedImage")
  @@map("image_likes")
}

enum UploadType {
  WEBSITE
  TOKEN
}

enum TagSource {
  USER
}

enum FaceSource {
  Scan
  Manual
}

enum MimeType {
  PNG
  JPG
  SVG
  WEBP
  WEBM
  AVIF
  GIF
  MP4
}
