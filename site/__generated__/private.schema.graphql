### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alias {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

input AliasCreateNestedManyWithoutPersonInput {
  connect: [AliasWhereUniqueInput!]
  connectOrCreate: [AliasCreateOrConnectWithoutPersonInput!]
  create: [AliasCreateWithoutPersonInput!]
}

input AliasCreateNestedOneWithoutPreferredAliasOfInput {
  connect: AliasWhereUniqueInput
  connectOrCreate: AliasCreateOrConnectWithoutPreferredAliasOfInput
  create: AliasCreateWithoutPreferredAliasOfInput
}

input AliasCreateOrConnectWithoutPersonInput {
  create: AliasCreateWithoutPersonInput!
  where: AliasWhereUniqueInput!
}

input AliasCreateOrConnectWithoutPreferredAliasOfInput {
  create: AliasCreateWithoutPreferredAliasOfInput!
  where: AliasWhereUniqueInput!
}

input AliasCreateWithoutPersonInput {
  createdAt: DateTime
  name: String!
  preferredAliasOf: PersonCreateNestedOneWithoutPreferredAliasInput
  updatedAt: DateTime
}

input AliasCreateWithoutPreferredAliasOfInput {
  createdAt: DateTime
  name: String!
  person: PersonCreateNestedOneWithoutAliasesInput!
  updatedAt: DateTime
}

input AliasListRelationFilter {
  every: AliasWhereInput
  none: AliasWhereInput
  some: AliasWhereInput
}

input AliasPersonAliasCompoundUniqueInput {
  name: String!
  personId: Int!
}

input AliasScalarWhereInput {
  AND: [AliasScalarWhereInput!]
  NOT: [AliasScalarWhereInput!]
  OR: [AliasScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  personId: IntFilter
  updatedAt: DateTimeFilter
}

input AliasUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AliasUpdateManyWithWhereWithoutPersonInput {
  data: AliasUpdateManyMutationInput!
  where: AliasScalarWhereInput!
}

input AliasUpdateManyWithoutPersonInput {
  connect: [AliasWhereUniqueInput!]
  connectOrCreate: [AliasCreateOrConnectWithoutPersonInput!]
  create: [AliasCreateWithoutPersonInput!]
  delete: [AliasWhereUniqueInput!]
  deleteMany: [AliasScalarWhereInput!]
  disconnect: [AliasWhereUniqueInput!]
  set: [AliasWhereUniqueInput!]
  update: [AliasUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [AliasUpdateManyWithWhereWithoutPersonInput!]
  upsert: [AliasUpsertWithWhereUniqueWithoutPersonInput!]
}

input AliasUpdateOneWithoutPreferredAliasOfInput {
  connect: AliasWhereUniqueInput
  connectOrCreate: AliasCreateOrConnectWithoutPreferredAliasOfInput
  create: AliasCreateWithoutPreferredAliasOfInput
  delete: Boolean
  disconnect: Boolean
  update: AliasUpdateWithoutPreferredAliasOfInput
  upsert: AliasUpsertWithoutPreferredAliasOfInput
}

input AliasUpdateWithWhereUniqueWithoutPersonInput {
  data: AliasUpdateWithoutPersonInput!
  where: AliasWhereUniqueInput!
}

input AliasUpdateWithoutPersonInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  preferredAliasOf: PersonUpdateOneWithoutPreferredAliasInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AliasUpdateWithoutPreferredAliasOfInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  person: PersonUpdateOneRequiredWithoutAliasesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AliasUpsertWithWhereUniqueWithoutPersonInput {
  create: AliasCreateWithoutPersonInput!
  update: AliasUpdateWithoutPersonInput!
  where: AliasWhereUniqueInput!
}

input AliasUpsertWithoutPreferredAliasOfInput {
  create: AliasCreateWithoutPreferredAliasOfInput!
  update: AliasUpdateWithoutPreferredAliasOfInput!
}

input AliasWhereInput {
  AND: [AliasWhereInput!]
  NOT: [AliasWhereInput!]
  OR: [AliasWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  person: PersonWhereInput
  personId: IntFilter
  preferredAliasOf: PersonWhereInput
  updatedAt: DateTimeFilter
}

input AliasWhereUniqueInput {
  id: Int
  personAlias: AliasPersonAliasCompoundUniqueInput
}

type Appearance {
  addedBy: User!
  createdAt: DateTime!
  faces(cursor: FaceWhereUniqueInput, skip: Int, take: Int): [Face!]!
  id: Int!
  image: Image!
  person: Person!
  updatedAt: DateTime!
}

input AppearanceAppearanceCompoundUniqueInput {
  imageId: Int!
  personId: Int!
}

input AppearanceCreateNestedManyWithoutAddedByInput {
  connect: [AppearanceWhereUniqueInput!]
  connectOrCreate: [AppearanceCreateOrConnectWithoutAddedByInput!]
  create: [AppearanceCreateWithoutAddedByInput!]
}

input AppearanceCreateNestedManyWithoutImageInput {
  connect: [AppearanceWhereUniqueInput!]
  connectOrCreate: [AppearanceCreateOrConnectWithoutImageInput!]
  create: [AppearanceCreateWithoutImageInput!]
}

input AppearanceCreateNestedManyWithoutPersonInput {
  connect: [AppearanceWhereUniqueInput!]
  connectOrCreate: [AppearanceCreateOrConnectWithoutPersonInput!]
  create: [AppearanceCreateWithoutPersonInput!]
}

input AppearanceCreateOrConnectWithoutAddedByInput {
  create: AppearanceCreateWithoutAddedByInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceCreateOrConnectWithoutFacesInput {
  create: AppearanceCreateWithoutFacesInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceCreateOrConnectWithoutImageInput {
  create: AppearanceCreateWithoutImageInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceCreateOrConnectWithoutPersonInput {
  create: AppearanceCreateWithoutPersonInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceCreateWithoutAddedByInput {
  createdAt: DateTime
  faces: FaceCreateNestedManyWithoutAppearanceInput
  image: ImageCreateNestedOneWithoutAppearancesInput!
  person: PersonCreateNestedOneWithoutAppearancesInput!
  updatedAt: DateTime
}

input AppearanceCreateWithoutFacesInput {
  addedBy: UserCreateNestedOneWithoutTaggedAppearancesInput!
  createdAt: DateTime
  image: ImageCreateNestedOneWithoutAppearancesInput!
  person: PersonCreateNestedOneWithoutAppearancesInput!
  updatedAt: DateTime
}

input AppearanceCreateWithoutImageInput {
  addedBy: UserCreateNestedOneWithoutTaggedAppearancesInput!
  createdAt: DateTime
  faces: FaceCreateNestedManyWithoutAppearanceInput
  person: PersonCreateNestedOneWithoutAppearancesInput!
  updatedAt: DateTime
}

input AppearanceCreateWithoutPersonInput {
  addedBy: UserCreateNestedOneWithoutTaggedAppearancesInput!
  createdAt: DateTime
  faces: FaceCreateNestedManyWithoutAppearanceInput
  image: ImageCreateNestedOneWithoutAppearancesInput!
  updatedAt: DateTime
}

input AppearanceListRelationFilter {
  every: AppearanceWhereInput
  none: AppearanceWhereInput
  some: AppearanceWhereInput
}

input AppearanceScalarWhereInput {
  AND: [AppearanceScalarWhereInput!]
  NOT: [AppearanceScalarWhereInput!]
  OR: [AppearanceScalarWhereInput!]
  addedById: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageId: IntFilter
  personId: IntFilter
  updatedAt: DateTimeFilter
}

input AppearanceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AppearanceUpdateManyWithWhereWithoutAddedByInput {
  data: AppearanceUpdateManyMutationInput!
  where: AppearanceScalarWhereInput!
}

input AppearanceUpdateManyWithWhereWithoutImageInput {
  data: AppearanceUpdateManyMutationInput!
  where: AppearanceScalarWhereInput!
}

input AppearanceUpdateManyWithWhereWithoutPersonInput {
  data: AppearanceUpdateManyMutationInput!
  where: AppearanceScalarWhereInput!
}

input AppearanceUpdateManyWithoutAddedByInput {
  connect: [AppearanceWhereUniqueInput!]
  connectOrCreate: [AppearanceCreateOrConnectWithoutAddedByInput!]
  create: [AppearanceCreateWithoutAddedByInput!]
  delete: [AppearanceWhereUniqueInput!]
  deleteMany: [AppearanceScalarWhereInput!]
  disconnect: [AppearanceWhereUniqueInput!]
  set: [AppearanceWhereUniqueInput!]
  update: [AppearanceUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [AppearanceUpdateManyWithWhereWithoutAddedByInput!]
  upsert: [AppearanceUpsertWithWhereUniqueWithoutAddedByInput!]
}

input AppearanceUpdateManyWithoutImageInput {
  connect: [AppearanceWhereUniqueInput!]
  connectOrCreate: [AppearanceCreateOrConnectWithoutImageInput!]
  create: [AppearanceCreateWithoutImageInput!]
  delete: [AppearanceWhereUniqueInput!]
  deleteMany: [AppearanceScalarWhereInput!]
  disconnect: [AppearanceWhereUniqueInput!]
  set: [AppearanceWhereUniqueInput!]
  update: [AppearanceUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [AppearanceUpdateManyWithWhereWithoutImageInput!]
  upsert: [AppearanceUpsertWithWhereUniqueWithoutImageInput!]
}

input AppearanceUpdateManyWithoutPersonInput {
  connect: [AppearanceWhereUniqueInput!]
  connectOrCreate: [AppearanceCreateOrConnectWithoutPersonInput!]
  create: [AppearanceCreateWithoutPersonInput!]
  delete: [AppearanceWhereUniqueInput!]
  deleteMany: [AppearanceScalarWhereInput!]
  disconnect: [AppearanceWhereUniqueInput!]
  set: [AppearanceWhereUniqueInput!]
  update: [AppearanceUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [AppearanceUpdateManyWithWhereWithoutPersonInput!]
  upsert: [AppearanceUpsertWithWhereUniqueWithoutPersonInput!]
}

input AppearanceUpdateOneWithoutFacesInput {
  connect: AppearanceWhereUniqueInput
  connectOrCreate: AppearanceCreateOrConnectWithoutFacesInput
  create: AppearanceCreateWithoutFacesInput
  delete: Boolean
  disconnect: Boolean
  update: AppearanceUpdateWithoutFacesInput
  upsert: AppearanceUpsertWithoutFacesInput
}

input AppearanceUpdateWithWhereUniqueWithoutAddedByInput {
  data: AppearanceUpdateWithoutAddedByInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceUpdateWithWhereUniqueWithoutImageInput {
  data: AppearanceUpdateWithoutImageInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceUpdateWithWhereUniqueWithoutPersonInput {
  data: AppearanceUpdateWithoutPersonInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceUpdateWithoutAddedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  faces: FaceUpdateManyWithoutAppearanceInput
  image: ImageUpdateOneRequiredWithoutAppearancesInput
  person: PersonUpdateOneRequiredWithoutAppearancesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AppearanceUpdateWithoutFacesInput {
  addedBy: UserUpdateOneRequiredWithoutTaggedAppearancesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  image: ImageUpdateOneRequiredWithoutAppearancesInput
  person: PersonUpdateOneRequiredWithoutAppearancesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AppearanceUpdateWithoutImageInput {
  addedBy: UserUpdateOneRequiredWithoutTaggedAppearancesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  faces: FaceUpdateManyWithoutAppearanceInput
  person: PersonUpdateOneRequiredWithoutAppearancesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AppearanceUpdateWithoutPersonInput {
  addedBy: UserUpdateOneRequiredWithoutTaggedAppearancesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  faces: FaceUpdateManyWithoutAppearanceInput
  image: ImageUpdateOneRequiredWithoutAppearancesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AppearanceUpsertWithWhereUniqueWithoutAddedByInput {
  create: AppearanceCreateWithoutAddedByInput!
  update: AppearanceUpdateWithoutAddedByInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceUpsertWithWhereUniqueWithoutImageInput {
  create: AppearanceCreateWithoutImageInput!
  update: AppearanceUpdateWithoutImageInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceUpsertWithWhereUniqueWithoutPersonInput {
  create: AppearanceCreateWithoutPersonInput!
  update: AppearanceUpdateWithoutPersonInput!
  where: AppearanceWhereUniqueInput!
}

input AppearanceUpsertWithoutFacesInput {
  create: AppearanceCreateWithoutFacesInput!
  update: AppearanceUpdateWithoutFacesInput!
}

input AppearanceWhereInput {
  AND: [AppearanceWhereInput!]
  NOT: [AppearanceWhereInput!]
  OR: [AppearanceWhereInput!]
  addedBy: UserWhereInput
  addedById: IntFilter
  createdAt: DateTimeFilter
  faces: FaceListRelationFilter
  id: IntFilter
  image: ImageWhereInput
  imageId: IntFilter
  person: PersonWhereInput
  personId: IntFilter
  updatedAt: DateTimeFilter
}

input AppearanceWhereUniqueInput {
  appearance: AppearanceAppearanceCompoundUniqueInput
  id: Int
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumFaceSourceFieldUpdateOperationsInput {
  set: FaceSource
}

input EnumFaceSourceFilter {
  equals: FaceSource
  in: [FaceSource!]
  not: NestedEnumFaceSourceFilter
  notIn: [FaceSource!]
}

input EnumMimeTypeFieldUpdateOperationsInput {
  set: MimeType
}

input EnumMimeTypeFilter {
  equals: MimeType
  in: [MimeType!]
  not: NestedEnumMimeTypeFilter
  notIn: [MimeType!]
}

input EnumTagSourceFieldUpdateOperationsInput {
  set: TagSource
}

input EnumTagSourceFilter {
  equals: TagSource
  in: [TagSource!]
  not: NestedEnumTagSourceFilter
  notIn: [TagSource!]
}

input EnumUploadTypeFieldUpdateOperationsInput {
  set: UploadType
}

input EnumUploadTypeFilter {
  equals: UploadType
  in: [UploadType!]
  not: NestedEnumUploadTypeFilter
  notIn: [UploadType!]
}

type Face {
  addedBy: User
  appearance: Appearance
  createdAt: DateTime!
  height: Float!
  id: Int!
  image: Image!
  score: Float!
  source: FaceSource!
  updatedAt: DateTime!
  width: Float!
  x: Float!
  y: Float!
}

input FaceCreateNestedManyWithoutAddedByInput {
  connect: [FaceWhereUniqueInput!]
}

input FaceCreateNestedManyWithoutAppearanceInput {
  connect: [FaceWhereUniqueInput!]
}

input FaceCreateNestedManyWithoutImageInput {
  connect: [FaceWhereUniqueInput!]
}

input FaceCreateNestedManyWithoutPersonInput {
  connect: [FaceWhereUniqueInput!]
}

input FaceInput {
  certainty: Float!
  descriptor: [Float!]!
  height: Float!
  width: Float!
  x: Float!
  y: Float!
}

input FaceListRelationFilter {
  every: FaceWhereInput
  none: FaceWhereInput
  some: FaceWhereInput
}

input FaceScalarWhereInput {
  AND: [FaceScalarWhereInput!]
  NOT: [FaceScalarWhereInput!]
  OR: [FaceScalarWhereInput!]
  addedById: IntNullableFilter
  appearanceId: IntNullableFilter
  createdAt: DateTimeFilter
  height: FloatFilter
  id: IntFilter
  imageId: IntFilter
  personId: IntNullableFilter
  score: FloatFilter
  source: EnumFaceSourceFilter
  updatedAt: DateTimeFilter
  width: FloatFilter
  x: FloatFilter
  y: FloatFilter
}

enum FaceSource {
  Manual
  Scan
}

input FaceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  score: FloatFieldUpdateOperationsInput
  source: EnumFaceSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: FloatFieldUpdateOperationsInput
  x: FloatFieldUpdateOperationsInput
  y: FloatFieldUpdateOperationsInput
}

input FaceUpdateManyWithWhereWithoutAddedByInput {
  data: FaceUpdateManyMutationInput!
  where: FaceScalarWhereInput!
}

input FaceUpdateManyWithWhereWithoutAppearanceInput {
  data: FaceUpdateManyMutationInput!
  where: FaceScalarWhereInput!
}

input FaceUpdateManyWithWhereWithoutImageInput {
  data: FaceUpdateManyMutationInput!
  where: FaceScalarWhereInput!
}

input FaceUpdateManyWithWhereWithoutPersonInput {
  data: FaceUpdateManyMutationInput!
  where: FaceScalarWhereInput!
}

input FaceUpdateManyWithoutAddedByInput {
  connect: [FaceWhereUniqueInput!]
  delete: [FaceWhereUniqueInput!]
  deleteMany: [FaceScalarWhereInput!]
  disconnect: [FaceWhereUniqueInput!]
  set: [FaceWhereUniqueInput!]
  update: [FaceUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [FaceUpdateManyWithWhereWithoutAddedByInput!]
}

input FaceUpdateManyWithoutAppearanceInput {
  connect: [FaceWhereUniqueInput!]
  delete: [FaceWhereUniqueInput!]
  deleteMany: [FaceScalarWhereInput!]
  disconnect: [FaceWhereUniqueInput!]
  set: [FaceWhereUniqueInput!]
  update: [FaceUpdateWithWhereUniqueWithoutAppearanceInput!]
  updateMany: [FaceUpdateManyWithWhereWithoutAppearanceInput!]
}

input FaceUpdateManyWithoutImageInput {
  connect: [FaceWhereUniqueInput!]
  delete: [FaceWhereUniqueInput!]
  deleteMany: [FaceScalarWhereInput!]
  disconnect: [FaceWhereUniqueInput!]
  set: [FaceWhereUniqueInput!]
  update: [FaceUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [FaceUpdateManyWithWhereWithoutImageInput!]
}

input FaceUpdateManyWithoutPersonInput {
  connect: [FaceWhereUniqueInput!]
  delete: [FaceWhereUniqueInput!]
  deleteMany: [FaceScalarWhereInput!]
  disconnect: [FaceWhereUniqueInput!]
  set: [FaceWhereUniqueInput!]
  update: [FaceUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [FaceUpdateManyWithWhereWithoutPersonInput!]
}

input FaceUpdateWithWhereUniqueWithoutAddedByInput {
  data: FaceUpdateWithoutAddedByInput!
  where: FaceWhereUniqueInput!
}

input FaceUpdateWithWhereUniqueWithoutAppearanceInput {
  data: FaceUpdateWithoutAppearanceInput!
  where: FaceWhereUniqueInput!
}

input FaceUpdateWithWhereUniqueWithoutImageInput {
  data: FaceUpdateWithoutImageInput!
  where: FaceWhereUniqueInput!
}

input FaceUpdateWithWhereUniqueWithoutPersonInput {
  data: FaceUpdateWithoutPersonInput!
  where: FaceWhereUniqueInput!
}

input FaceUpdateWithoutAddedByInput {
  appearance: AppearanceUpdateOneWithoutFacesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  image: ImageUpdateOneRequiredWithoutFacesInput
  person: PersonUpdateOneWithoutAppearsInInput
  score: FloatFieldUpdateOperationsInput
  source: EnumFaceSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: FloatFieldUpdateOperationsInput
  x: FloatFieldUpdateOperationsInput
  y: FloatFieldUpdateOperationsInput
}

input FaceUpdateWithoutAppearanceInput {
  addedBy: UserUpdateOneWithoutMarkedFacesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  image: ImageUpdateOneRequiredWithoutFacesInput
  person: PersonUpdateOneWithoutAppearsInInput
  score: FloatFieldUpdateOperationsInput
  source: EnumFaceSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: FloatFieldUpdateOperationsInput
  x: FloatFieldUpdateOperationsInput
  y: FloatFieldUpdateOperationsInput
}

input FaceUpdateWithoutImageInput {
  addedBy: UserUpdateOneWithoutMarkedFacesInput
  appearance: AppearanceUpdateOneWithoutFacesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  person: PersonUpdateOneWithoutAppearsInInput
  score: FloatFieldUpdateOperationsInput
  source: EnumFaceSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: FloatFieldUpdateOperationsInput
  x: FloatFieldUpdateOperationsInput
  y: FloatFieldUpdateOperationsInput
}

input FaceUpdateWithoutPersonInput {
  addedBy: UserUpdateOneWithoutMarkedFacesInput
  appearance: AppearanceUpdateOneWithoutFacesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: FloatFieldUpdateOperationsInput
  image: ImageUpdateOneRequiredWithoutFacesInput
  score: FloatFieldUpdateOperationsInput
  source: EnumFaceSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: FloatFieldUpdateOperationsInput
  x: FloatFieldUpdateOperationsInput
  y: FloatFieldUpdateOperationsInput
}

input FaceWhereInput {
  AND: [FaceWhereInput!]
  NOT: [FaceWhereInput!]
  OR: [FaceWhereInput!]
  addedBy: UserWhereInput
  addedById: IntNullableFilter
  appearance: AppearanceWhereInput
  appearanceId: IntNullableFilter
  createdAt: DateTimeFilter
  height: FloatFilter
  id: IntFilter
  image: ImageWhereInput
  imageId: IntFilter
  person: PersonWhereInput
  personId: IntNullableFilter
  score: FloatFilter
  source: EnumFaceSourceFilter
  updatedAt: DateTimeFilter
  width: FloatFilter
  x: FloatFilter
  y: FloatFilter
}

input FaceWhereUniqueInput {
  id: Int
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Image {
  appearances(cursor: AppearanceWhereUniqueInput, skip: Int, take: Int): [Appearance!]!

  """The aspect ratio of the image"""
  aspectRatio: Float!
  bytes: Int!
  caption: String
  createdAt: DateTime!
  faceScanDate: DateTime

  """The name the image file was uploaded with."""
  fileName: String

  """Human readable file size. Use `bytes` for a number representation."""
  fileSize: String!

  """SHA256 checksum of the image."""
  hash: String!

  """Height of the image in pixels."""
  height: Int!
  id: Int!

  """( ͡° ͜ʖ ͡°)"""
  isNsfw: Boolean!

  """The IANA media type of the image."""
  mimetype: MimeType!

  """
  Block hash of the image, useful for doing reverse search using hamming distance.
  """
  pHash: String

  """Dominant colors in the image in decimal format, sorted by frequency."""
  palette: [Int!]!

  """The visibility status of the image."""
  public: Boolean!

  """Direct link to the image on the CDN"""
  rawUrl: String!

  """The unique url identifier of the image."""
  slug: String!

  """
  The url the image was taken from (if applicable). Not guaranteed to be a direct image url.
  """
  source: String
  tags(cursor: TagWhereUniqueInput, skip: Int, take: Int): [Tag!]!
  unknownFaces: [Face!]!
  uploadType: UploadType!
  uploadedBy: User

  """Link to the image on the site"""
  url: String!
  views: Int!

  """Width of the image in pixels."""
  width: Int!
}

input ImageCreateNestedManyWithoutUserInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutUserInput!]
  create: [ImageCreateWithoutUserInput!]
}

input ImageCreateNestedOneWithoutAppearancesInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutAppearancesInput
  create: ImageCreateWithoutAppearancesInput
}

input ImageCreateNestedOneWithoutTagsInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutTagsInput
  create: ImageCreateWithoutTagsInput
}

input ImageCreateOrConnectWithoutAppearancesInput {
  create: ImageCreateWithoutAppearancesInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutFacesInput {
  create: ImageCreateWithoutFacesInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutTagsInput {
  create: ImageCreateWithoutTagsInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutUserInput {
  create: ImageCreateWithoutUserInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutAppearancesInput {
  bytes: Int
  caption: String
  createdAt: DateTime
  faceScanDate: DateTime
  faces: FaceCreateNestedManyWithoutImageInput
  fileName: String
  hash: String!
  height: Int!
  ireneBotId: Int
  isNsfw: Boolean
  mimetype: MimeType!
  pHash: String
  palette: ImageCreatepaletteInput
  public: Boolean
  slug: String!
  source: String
  tags: TagCreateNestedManyWithoutImageInput
  updatedAt: DateTime
  uploadType: UploadType!
  user: UserCreateNestedOneWithoutImagesInput
  views: Int
  width: Int!
}

input ImageCreateWithoutFacesInput {
  appearances: AppearanceCreateNestedManyWithoutImageInput
  bytes: Int
  caption: String
  createdAt: DateTime
  faceScanDate: DateTime
  fileName: String
  hash: String!
  height: Int!
  ireneBotId: Int
  isNsfw: Boolean
  mimetype: MimeType!
  pHash: String
  palette: ImageCreatepaletteInput
  public: Boolean
  slug: String!
  source: String
  tags: TagCreateNestedManyWithoutImageInput
  updatedAt: DateTime
  uploadType: UploadType!
  user: UserCreateNestedOneWithoutImagesInput
  views: Int
  width: Int!
}

input ImageCreateWithoutTagsInput {
  appearances: AppearanceCreateNestedManyWithoutImageInput
  bytes: Int
  caption: String
  createdAt: DateTime
  faceScanDate: DateTime
  faces: FaceCreateNestedManyWithoutImageInput
  fileName: String
  hash: String!
  height: Int!
  ireneBotId: Int
  isNsfw: Boolean
  mimetype: MimeType!
  pHash: String
  palette: ImageCreatepaletteInput
  public: Boolean
  slug: String!
  source: String
  updatedAt: DateTime
  uploadType: UploadType!
  user: UserCreateNestedOneWithoutImagesInput
  views: Int
  width: Int!
}

input ImageCreateWithoutUserInput {
  appearances: AppearanceCreateNestedManyWithoutImageInput
  bytes: Int
  caption: String
  createdAt: DateTime
  faceScanDate: DateTime
  faces: FaceCreateNestedManyWithoutImageInput
  fileName: String
  hash: String!
  height: Int!
  ireneBotId: Int
  isNsfw: Boolean
  mimetype: MimeType!
  pHash: String
  palette: ImageCreatepaletteInput
  public: Boolean
  slug: String!
  source: String
  tags: TagCreateNestedManyWithoutImageInput
  updatedAt: DateTime
  uploadType: UploadType!
  views: Int
  width: Int!
}

input ImageCreatepaletteInput {
  set: [Int!]
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageOrderByInput {
  bytes: SortOrder
  caption: SortOrder
  createdAt: SortOrder
  faceScanDate: SortOrder
  fileName: SortOrder
  hash: SortOrder
  height: SortOrder
  id: SortOrder
  ireneBotId: SortOrder
  isNsfw: SortOrder
  mimetype: SortOrder
  pHash: SortOrder
  palette: SortOrder
  public: SortOrder
  slug: SortOrder
  source: SortOrder
  updatedAt: SortOrder
  uploadType: SortOrder
  userId: SortOrder
  views: SortOrder
  width: SortOrder
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  bytes: IntFilter
  caption: StringNullableFilter
  createdAt: DateTimeFilter
  faceScanDate: DateTimeNullableFilter
  fileName: StringNullableFilter
  hash: StringFilter
  height: IntFilter
  id: IntFilter
  ireneBotId: IntNullableFilter
  isNsfw: BoolFilter
  mimetype: EnumMimeTypeFilter
  pHash: StringNullableFilter
  palette: IntNullableListFilter
  public: BoolFilter
  slug: StringFilter
  source: StringNullableFilter
  updatedAt: DateTimeFilter
  uploadType: EnumUploadTypeFilter
  userId: IntNullableFilter
  views: IntFilter
  width: IntFilter
}

input ImageUpdateManyMutationInput {
  bytes: IntFieldUpdateOperationsInput
  caption: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  faceScanDate: NullableDateTimeFieldUpdateOperationsInput
  fileName: NullableStringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  isNsfw: BoolFieldUpdateOperationsInput
  mimetype: EnumMimeTypeFieldUpdateOperationsInput
  pHash: NullableStringFieldUpdateOperationsInput
  palette: ImageUpdatepaletteInput
  public: BoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  source: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uploadType: EnumUploadTypeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input ImageUpdateManyWithWhereWithoutUserInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithoutUserInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutUserInput!]
  create: [ImageCreateWithoutUserInput!]
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutUserInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutUserInput!]
}

input ImageUpdateOneRequiredWithoutAppearancesInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutAppearancesInput
  create: ImageCreateWithoutAppearancesInput
  update: ImageUpdateWithoutAppearancesInput
  upsert: ImageUpsertWithoutAppearancesInput
}

input ImageUpdateOneRequiredWithoutFacesInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutFacesInput
  create: ImageCreateWithoutFacesInput
  update: ImageUpdateWithoutFacesInput
  upsert: ImageUpsertWithoutFacesInput
}

input ImageUpdateOneRequiredWithoutTagsInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutTagsInput
  create: ImageCreateWithoutTagsInput
  update: ImageUpdateWithoutTagsInput
  upsert: ImageUpsertWithoutTagsInput
}

input ImageUpdateWithWhereUniqueWithoutUserInput {
  data: ImageUpdateWithoutUserInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithoutAppearancesInput {
  bytes: IntFieldUpdateOperationsInput
  caption: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  faceScanDate: NullableDateTimeFieldUpdateOperationsInput
  faces: FaceUpdateManyWithoutImageInput
  fileName: NullableStringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  isNsfw: BoolFieldUpdateOperationsInput
  mimetype: EnumMimeTypeFieldUpdateOperationsInput
  pHash: NullableStringFieldUpdateOperationsInput
  palette: ImageUpdatepaletteInput
  public: BoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  source: NullableStringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutImageInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uploadType: EnumUploadTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutImagesInput
  views: IntFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input ImageUpdateWithoutFacesInput {
  appearances: AppearanceUpdateManyWithoutImageInput
  bytes: IntFieldUpdateOperationsInput
  caption: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  faceScanDate: NullableDateTimeFieldUpdateOperationsInput
  fileName: NullableStringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  isNsfw: BoolFieldUpdateOperationsInput
  mimetype: EnumMimeTypeFieldUpdateOperationsInput
  pHash: NullableStringFieldUpdateOperationsInput
  palette: ImageUpdatepaletteInput
  public: BoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  source: NullableStringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutImageInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uploadType: EnumUploadTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutImagesInput
  views: IntFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input ImageUpdateWithoutTagsInput {
  appearances: AppearanceUpdateManyWithoutImageInput
  bytes: IntFieldUpdateOperationsInput
  caption: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  faceScanDate: NullableDateTimeFieldUpdateOperationsInput
  faces: FaceUpdateManyWithoutImageInput
  fileName: NullableStringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  isNsfw: BoolFieldUpdateOperationsInput
  mimetype: EnumMimeTypeFieldUpdateOperationsInput
  pHash: NullableStringFieldUpdateOperationsInput
  palette: ImageUpdatepaletteInput
  public: BoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  source: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uploadType: EnumUploadTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutImagesInput
  views: IntFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input ImageUpdateWithoutUserInput {
  appearances: AppearanceUpdateManyWithoutImageInput
  bytes: IntFieldUpdateOperationsInput
  caption: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  faceScanDate: NullableDateTimeFieldUpdateOperationsInput
  faces: FaceUpdateManyWithoutImageInput
  fileName: NullableStringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  height: IntFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  isNsfw: BoolFieldUpdateOperationsInput
  mimetype: EnumMimeTypeFieldUpdateOperationsInput
  pHash: NullableStringFieldUpdateOperationsInput
  palette: ImageUpdatepaletteInput
  public: BoolFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  source: NullableStringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutImageInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uploadType: EnumUploadTypeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  width: IntFieldUpdateOperationsInput
}

input ImageUpdatepaletteInput {
  set: [Int!]
}

input ImageUpsertWithWhereUniqueWithoutUserInput {
  create: ImageCreateWithoutUserInput!
  update: ImageUpdateWithoutUserInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithoutAppearancesInput {
  create: ImageCreateWithoutAppearancesInput!
  update: ImageUpdateWithoutAppearancesInput!
}

input ImageUpsertWithoutFacesInput {
  create: ImageCreateWithoutFacesInput!
  update: ImageUpdateWithoutFacesInput!
}

input ImageUpsertWithoutTagsInput {
  create: ImageCreateWithoutTagsInput!
  update: ImageUpdateWithoutTagsInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  appearances: AppearanceListRelationFilter
  bytes: IntFilter
  caption: StringNullableFilter
  createdAt: DateTimeFilter
  faceScanDate: DateTimeNullableFilter
  faces: FaceListRelationFilter
  fileName: StringNullableFilter
  hash: StringFilter
  height: IntFilter
  id: IntFilter
  ireneBotId: IntNullableFilter
  isNsfw: BoolFilter
  mimetype: EnumMimeTypeFilter
  pHash: StringNullableFilter
  palette: IntNullableListFilter
  public: BoolFilter
  slug: StringFilter
  source: StringNullableFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
  uploadType: EnumUploadTypeFilter
  user: UserWhereInput
  userId: IntNullableFilter
  views: IntFilter
  width: IntFilter
}

input ImageWhereUniqueInput {
  id: Int
  ireneBotId: Int
  slug: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableListFilter {
  equals: [Int!]
  has: Int
  hasEvery: [Int!]
  hasSome: [Int!]
  isEmpty: Boolean
}

enum MimeType {
  AVIF
  GIF
  JPG
  MP4
  PNG
  SVG
  WEBM
  WEBP
}

type Mutation {
  """Add an appearance relation on an image."""
  addAppearance(imageId: Int!, personId: Int!): Appearance!
  createOnePerson(data: PersonCreateInput!): Person!

  """
  Add metadata labels to an existing image. Only available to bot accounts
  """
  labelImage(faces: [FaceInput!]!, ireneBotId: Int, pHash: String, palette: [Int!]!, personName: String, replacePreviousScan: Boolean, slug: String!): Image

  """Attach an existing face to an apperance."""
  linkFace(appearanceId: Int!, faceId: Int!): Appearance!

  """Removes an appearance from an image"""
  removeAppearance(appearanceId: Int!): Appearance!

  """Scan image for faces asynchronously. Only available to admin accounts"""
  scanFaces(slug: String!): Image

  """
  Unlinks an existing face from an appearance. This dissociates the face from the appearance but does not remove the face data
  """
  unlinkFace(appearanceId: Int!, faceId: Int!): Int!
  upsertOnePerson(create: PersonCreateInput!, update: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumFaceSourceFilter {
  equals: FaceSource
  in: [FaceSource!]
  not: NestedEnumFaceSourceFilter
  notIn: [FaceSource!]
}

input NestedEnumMimeTypeFilter {
  equals: MimeType
  in: [MimeType!]
  not: NestedEnumMimeTypeFilter
  notIn: [MimeType!]
}

input NestedEnumTagSourceFilter {
  equals: TagSource
  in: [TagSource!]
  not: NestedEnumTagSourceFilter
  notIn: [TagSource!]
}

input NestedEnumUploadTypeFilter {
  equals: UploadType
  in: [UploadType!]
  not: NestedEnumUploadTypeFilter
  notIn: [UploadType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Person {
  aliases(cursor: AliasWhereUniqueInput, skip: Int, take: Int): [Alias!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  preferredAlias: Alias
  updatedAt: DateTime!
}

input PersonCreateInput {
  aliases: AliasCreateNestedManyWithoutPersonInput
  appearances: AppearanceCreateNestedManyWithoutPersonInput
  appearsIn: FaceCreateNestedManyWithoutPersonInput
  createdAt: DateTime
  description: String
  ireneBotId: Int
  name: String!
  preferredAlias: AliasCreateNestedOneWithoutPreferredAliasOfInput
  updatedAt: DateTime
}

input PersonCreateNestedOneWithoutAliasesInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutAliasesInput
  create: PersonCreateWithoutAliasesInput
}

input PersonCreateNestedOneWithoutAppearancesInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutAppearancesInput
  create: PersonCreateWithoutAppearancesInput
}

input PersonCreateNestedOneWithoutPreferredAliasInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutPreferredAliasInput
  create: PersonCreateWithoutPreferredAliasInput
}

input PersonCreateOrConnectWithoutAliasesInput {
  create: PersonCreateWithoutAliasesInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutAppearancesInput {
  create: PersonCreateWithoutAppearancesInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutAppearsInInput {
  create: PersonCreateWithoutAppearsInInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutPreferredAliasInput {
  create: PersonCreateWithoutPreferredAliasInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateWithoutAliasesInput {
  appearances: AppearanceCreateNestedManyWithoutPersonInput
  appearsIn: FaceCreateNestedManyWithoutPersonInput
  createdAt: DateTime
  description: String
  ireneBotId: Int
  name: String!
  preferredAlias: AliasCreateNestedOneWithoutPreferredAliasOfInput
  updatedAt: DateTime
}

input PersonCreateWithoutAppearancesInput {
  aliases: AliasCreateNestedManyWithoutPersonInput
  appearsIn: FaceCreateNestedManyWithoutPersonInput
  createdAt: DateTime
  description: String
  ireneBotId: Int
  name: String!
  preferredAlias: AliasCreateNestedOneWithoutPreferredAliasOfInput
  updatedAt: DateTime
}

input PersonCreateWithoutAppearsInInput {
  aliases: AliasCreateNestedManyWithoutPersonInput
  appearances: AppearanceCreateNestedManyWithoutPersonInput
  createdAt: DateTime
  description: String
  ireneBotId: Int
  name: String!
  preferredAlias: AliasCreateNestedOneWithoutPreferredAliasOfInput
  updatedAt: DateTime
}

input PersonCreateWithoutPreferredAliasInput {
  aliases: AliasCreateNestedManyWithoutPersonInput
  appearances: AppearanceCreateNestedManyWithoutPersonInput
  appearsIn: FaceCreateNestedManyWithoutPersonInput
  createdAt: DateTime
  description: String
  ireneBotId: Int
  name: String!
  updatedAt: DateTime
}

input PersonUpdateInput {
  aliases: AliasUpdateManyWithoutPersonInput
  appearances: AppearanceUpdateManyWithoutPersonInput
  appearsIn: FaceUpdateManyWithoutPersonInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  preferredAlias: AliasUpdateOneWithoutPreferredAliasOfInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonUpdateOneRequiredWithoutAliasesInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutAliasesInput
  create: PersonCreateWithoutAliasesInput
  update: PersonUpdateWithoutAliasesInput
  upsert: PersonUpsertWithoutAliasesInput
}

input PersonUpdateOneRequiredWithoutAppearancesInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutAppearancesInput
  create: PersonCreateWithoutAppearancesInput
  update: PersonUpdateWithoutAppearancesInput
  upsert: PersonUpsertWithoutAppearancesInput
}

input PersonUpdateOneWithoutAppearsInInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutAppearsInInput
  create: PersonCreateWithoutAppearsInInput
  delete: Boolean
  disconnect: Boolean
  update: PersonUpdateWithoutAppearsInInput
  upsert: PersonUpsertWithoutAppearsInInput
}

input PersonUpdateOneWithoutPreferredAliasInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutPreferredAliasInput
  create: PersonCreateWithoutPreferredAliasInput
  delete: Boolean
  disconnect: Boolean
  update: PersonUpdateWithoutPreferredAliasInput
  upsert: PersonUpsertWithoutPreferredAliasInput
}

input PersonUpdateWithoutAliasesInput {
  appearances: AppearanceUpdateManyWithoutPersonInput
  appearsIn: FaceUpdateManyWithoutPersonInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  preferredAlias: AliasUpdateOneWithoutPreferredAliasOfInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonUpdateWithoutAppearancesInput {
  aliases: AliasUpdateManyWithoutPersonInput
  appearsIn: FaceUpdateManyWithoutPersonInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  preferredAlias: AliasUpdateOneWithoutPreferredAliasOfInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonUpdateWithoutAppearsInInput {
  aliases: AliasUpdateManyWithoutPersonInput
  appearances: AppearanceUpdateManyWithoutPersonInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  preferredAlias: AliasUpdateOneWithoutPreferredAliasOfInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonUpdateWithoutPreferredAliasInput {
  aliases: AliasUpdateManyWithoutPersonInput
  appearances: AppearanceUpdateManyWithoutPersonInput
  appearsIn: FaceUpdateManyWithoutPersonInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  ireneBotId: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonUpsertWithoutAliasesInput {
  create: PersonCreateWithoutAliasesInput!
  update: PersonUpdateWithoutAliasesInput!
}

input PersonUpsertWithoutAppearancesInput {
  create: PersonCreateWithoutAppearancesInput!
  update: PersonUpdateWithoutAppearancesInput!
}

input PersonUpsertWithoutAppearsInInput {
  create: PersonCreateWithoutAppearsInInput!
  update: PersonUpdateWithoutAppearsInInput!
}

input PersonUpsertWithoutPreferredAliasInput {
  create: PersonCreateWithoutPreferredAliasInput!
  update: PersonUpdateWithoutPreferredAliasInput!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  aliases: AliasListRelationFilter
  appearances: AppearanceListRelationFilter
  appearsIn: FaceListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  ireneBotId: IntNullableFilter
  name: StringFilter
  preferredAlias: AliasWhereInput
  preferredAliasId: IntNullableFilter
  updatedAt: DateTimeFilter
}

input PersonWhereUniqueInput {
  id: Int
  ireneBotId: Int
}

type Query {
  """Find a single image by its slug."""
  image(slug: String!): Image
  images(cursor: ImageWhereUniqueInput, orderBy: [ImageOrderByInput!], skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  me: User
  people(cursor: PersonWhereUniqueInput, skip: Int, take: Int, where: PersonWhereInput): [Person!]!
  searchPerson(query: String!): [Person!]!
  user(id: Int): User
}

enum QueryMode {
  default
  insensitive
}

type Role {
  createdAt: DateTime!
  name: String!
}

input RoleCreateNestedManyWithoutUserInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutUserInput!]
  create: [RoleCreateWithoutUserInput!]
}

input RoleCreateOrConnectWithoutUserInput {
  create: RoleCreateWithoutUserInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateWithoutUserInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input RoleListRelationFilter {
  every: RoleWhereInput
  none: RoleWhereInput
  some: RoleWhereInput
}

input RoleScalarWhereInput {
  AND: [RoleScalarWhereInput!]
  NOT: [RoleScalarWhereInput!]
  OR: [RoleScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input RoleUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoleUpdateManyWithWhereWithoutUserInput {
  data: RoleUpdateManyMutationInput!
  where: RoleScalarWhereInput!
}

input RoleUpdateManyWithoutUserInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutUserInput!]
  create: [RoleCreateWithoutUserInput!]
  delete: [RoleWhereUniqueInput!]
  deleteMany: [RoleScalarWhereInput!]
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RoleUpdateManyWithWhereWithoutUserInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutUserInput!]
}

input RoleUpdateWithWhereUniqueWithoutUserInput {
  data: RoleUpdateWithoutUserInput!
  where: RoleWhereUniqueInput!
}

input RoleUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoleUpsertWithWhereUniqueWithoutUserInput {
  create: RoleCreateWithoutUserInput!
  update: RoleUpdateWithoutUserInput!
  where: RoleWhereUniqueInput!
}

input RoleUserRoleCompoundUniqueInput {
  name: String!
  userId: Int!
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input RoleWhereUniqueInput {
  id: Int
  userRole: RoleUserRoleCompoundUniqueInput
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  addedBy: User
  createdAt: DateTime!
  name: String!
  source: TagSource!
}

input TagCreateNestedManyWithoutAddedByInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutAddedByInput!]
  create: [TagCreateWithoutAddedByInput!]
}

input TagCreateNestedManyWithoutImageInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutImageInput!]
  create: [TagCreateWithoutImageInput!]
}

input TagCreateOrConnectWithoutAddedByInput {
  create: TagCreateWithoutAddedByInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutImageInput {
  create: TagCreateWithoutImageInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutAddedByInput {
  createdAt: DateTime
  image: ImageCreateNestedOneWithoutTagsInput!
  name: String!
  source: TagSource!
  updatedAt: DateTime
}

input TagCreateWithoutImageInput {
  addedBy: UserCreateNestedOneWithoutCratedTagsInput
  createdAt: DateTime
  name: String!
  source: TagSource!
  updatedAt: DateTime
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  addedById: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageId: IntFilter
  name: StringFilter
  source: EnumTagSourceFilter
  updatedAt: DateTimeFilter
}

enum TagSource {
  USER
}

input TagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  source: EnumTagSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateManyWithWhereWithoutAddedByInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutImageInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithoutAddedByInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutAddedByInput!]
  create: [TagCreateWithoutAddedByInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [TagUpdateManyWithWhereWithoutAddedByInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutAddedByInput!]
}

input TagUpdateManyWithoutImageInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutImageInput!]
  create: [TagCreateWithoutImageInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [TagUpdateManyWithWhereWithoutImageInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutImageInput!]
}

input TagUpdateWithWhereUniqueWithoutAddedByInput {
  data: TagUpdateWithoutAddedByInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutImageInput {
  data: TagUpdateWithoutImageInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithoutAddedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  image: ImageUpdateOneRequiredWithoutTagsInput
  name: StringFieldUpdateOperationsInput
  source: EnumTagSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateWithoutImageInput {
  addedBy: UserUpdateOneWithoutCratedTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  source: EnumTagSourceFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpsertWithWhereUniqueWithoutAddedByInput {
  create: TagCreateWithoutAddedByInput!
  update: TagUpdateWithoutAddedByInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutImageInput {
  create: TagCreateWithoutImageInput!
  update: TagUpdateWithoutImageInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  addedBy: UserWhereInput
  addedById: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: ImageWhereInput
  imageId: IntFilter
  name: StringFilter
  source: EnumTagSourceFilter
  updatedAt: DateTimeFilter
}

input TagWhereUniqueInput {
  id: Int
}

enum UploadType {
  TOKEN
  WEBSITE
}

type User {
  avatar: String
  bot: Boolean!
  id: Int!
  images(cursor: ImageWhereUniqueInput, skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  name: String
  roles(cursor: RoleWhereUniqueInput, skip: Int, take: Int): [Role!]!
}

input UserCreateNestedOneWithoutCratedTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCratedTagsInput
  create: UserCreateWithoutCratedTagsInput
}

input UserCreateNestedOneWithoutImagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutImagesInput
  create: UserCreateWithoutImagesInput
}

input UserCreateNestedOneWithoutTaggedAppearancesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTaggedAppearancesInput
  create: UserCreateWithoutTaggedAppearancesInput
}

input UserCreateOrConnectWithoutCratedTagsInput {
  create: UserCreateWithoutCratedTagsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutImagesInput {
  create: UserCreateWithoutImagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMarkedFacesInput {
  create: UserCreateWithoutMarkedFacesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTaggedAppearancesInput {
  create: UserCreateWithoutTaggedAppearancesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCratedTagsInput {
  bot: Boolean
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  images: ImageCreateNestedManyWithoutUserInput
  markedFaces: FaceCreateNestedManyWithoutAddedByInput
  name: String
  roles: RoleCreateNestedManyWithoutUserInput
  taggedAppearances: AppearanceCreateNestedManyWithoutAddedByInput
  token: String
  updatedAt: DateTime
}

input UserCreateWithoutImagesInput {
  bot: Boolean
  cratedTags: TagCreateNestedManyWithoutAddedByInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  markedFaces: FaceCreateNestedManyWithoutAddedByInput
  name: String
  roles: RoleCreateNestedManyWithoutUserInput
  taggedAppearances: AppearanceCreateNestedManyWithoutAddedByInput
  token: String
  updatedAt: DateTime
}

input UserCreateWithoutMarkedFacesInput {
  bot: Boolean
  cratedTags: TagCreateNestedManyWithoutAddedByInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  images: ImageCreateNestedManyWithoutUserInput
  name: String
  roles: RoleCreateNestedManyWithoutUserInput
  taggedAppearances: AppearanceCreateNestedManyWithoutAddedByInput
  token: String
  updatedAt: DateTime
}

input UserCreateWithoutTaggedAppearancesInput {
  bot: Boolean
  cratedTags: TagCreateNestedManyWithoutAddedByInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  images: ImageCreateNestedManyWithoutUserInput
  markedFaces: FaceCreateNestedManyWithoutAddedByInput
  name: String
  roles: RoleCreateNestedManyWithoutUserInput
  token: String
  updatedAt: DateTime
}

input UserUpdateOneRequiredWithoutTaggedAppearancesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTaggedAppearancesInput
  create: UserCreateWithoutTaggedAppearancesInput
  update: UserUpdateWithoutTaggedAppearancesInput
  upsert: UserUpsertWithoutTaggedAppearancesInput
}

input UserUpdateOneWithoutCratedTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCratedTagsInput
  create: UserCreateWithoutCratedTagsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCratedTagsInput
  upsert: UserUpsertWithoutCratedTagsInput
}

input UserUpdateOneWithoutImagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutImagesInput
  create: UserCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutImagesInput
  upsert: UserUpsertWithoutImagesInput
}

input UserUpdateOneWithoutMarkedFacesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMarkedFacesInput
  create: UserCreateWithoutMarkedFacesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutMarkedFacesInput
  upsert: UserUpsertWithoutMarkedFacesInput
}

input UserUpdateWithoutCratedTagsInput {
  bot: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutUserInput
  markedFaces: FaceUpdateManyWithoutAddedByInput
  name: NullableStringFieldUpdateOperationsInput
  roles: RoleUpdateManyWithoutUserInput
  taggedAppearances: AppearanceUpdateManyWithoutAddedByInput
  token: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutImagesInput {
  bot: BoolFieldUpdateOperationsInput
  cratedTags: TagUpdateManyWithoutAddedByInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  markedFaces: FaceUpdateManyWithoutAddedByInput
  name: NullableStringFieldUpdateOperationsInput
  roles: RoleUpdateManyWithoutUserInput
  taggedAppearances: AppearanceUpdateManyWithoutAddedByInput
  token: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutMarkedFacesInput {
  bot: BoolFieldUpdateOperationsInput
  cratedTags: TagUpdateManyWithoutAddedByInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  roles: RoleUpdateManyWithoutUserInput
  taggedAppearances: AppearanceUpdateManyWithoutAddedByInput
  token: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTaggedAppearancesInput {
  bot: BoolFieldUpdateOperationsInput
  cratedTags: TagUpdateManyWithoutAddedByInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutUserInput
  markedFaces: FaceUpdateManyWithoutAddedByInput
  name: NullableStringFieldUpdateOperationsInput
  roles: RoleUpdateManyWithoutUserInput
  token: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutCratedTagsInput {
  create: UserCreateWithoutCratedTagsInput!
  update: UserUpdateWithoutCratedTagsInput!
}

input UserUpsertWithoutImagesInput {
  create: UserCreateWithoutImagesInput!
  update: UserUpdateWithoutImagesInput!
}

input UserUpsertWithoutMarkedFacesInput {
  create: UserCreateWithoutMarkedFacesInput!
  update: UserUpdateWithoutMarkedFacesInput!
}

input UserUpsertWithoutTaggedAppearancesInput {
  create: UserCreateWithoutTaggedAppearancesInput!
  update: UserUpdateWithoutTaggedAppearancesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  bot: BoolFilter
  cratedTags: TagListRelationFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  images: ImageListRelationFilter
  markedFaces: FaceListRelationFilter
  name: StringNullableFilter
  roles: RoleListRelationFilter
  taggedAppearances: AppearanceListRelationFilter
  token: StringNullableFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  token: String
}
