### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AliasListRelationFilter {
  every: AliasWhereInput
  none: AliasWhereInput
  some: AliasWhereInput
}

input AliasWhereInput {
  AND: [AliasWhereInput!]
  NOT: [AliasWhereInput!]
  OR: [AliasWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  person: PersonWhereInput
  personId: IntFilter
  updatedAt: DateTimeFilter
}

type Appearance {
  addedBy: User!
  createdAt: DateTime!
  faces(cursor: FaceWhereUniqueInput, skip: Int, take: Int): [Face!]!
  id: Int!
  person: Person!
  updatedAt: DateTime!
}

input AppearanceAppearanceCompoundUniqueInput {
  imageId: Int!
  personId: Int!
}

input AppearanceListRelationFilter {
  every: AppearanceWhereInput
  none: AppearanceWhereInput
  some: AppearanceWhereInput
}

input AppearanceWhereInput {
  AND: [AppearanceWhereInput!]
  NOT: [AppearanceWhereInput!]
  OR: [AppearanceWhereInput!]
  addedBy: UserWhereInput
  addedById: IntFilter
  createdAt: DateTimeFilter
  faces: FaceListRelationFilter
  id: IntFilter
  image: ImageWhereInput
  imageId: IntFilter
  person: PersonWhereInput
  personId: IntFilter
  updatedAt: DateTimeFilter
}

input AppearanceWhereUniqueInput {
  appearance: AppearanceAppearanceCompoundUniqueInput
  id: Int
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumFaceSourceFilter {
  equals: FaceSource
  in: [FaceSource!]
  not: NestedEnumFaceSourceFilter
  notIn: [FaceSource!]
}

input EnumMimeTypeFilter {
  equals: MimeType
  in: [MimeType!]
  not: NestedEnumMimeTypeFilter
  notIn: [MimeType!]
}

input EnumTagSourceFilter {
  equals: TagSource
  in: [TagSource!]
  not: NestedEnumTagSourceFilter
  notIn: [TagSource!]
}

input EnumUploadTypeFilter {
  equals: UploadType
  in: [UploadType!]
  not: NestedEnumUploadTypeFilter
  notIn: [UploadType!]
}

type Face {
  addedBy: User
  appearance: Appearance
  createdAt: DateTime!
  height: Float!
  id: Int!
  image: Image!
  score: Float!
  updatedAt: DateTime!
  width: Float!
  x: Float!
  y: Float!
}

input FaceInput {
  certainty: Float!
  descriptor: [Float!]!
  height: Float!
  width: Float!
  x: Float!
  y: Float!
}

input FaceListRelationFilter {
  every: FaceWhereInput
  none: FaceWhereInput
  some: FaceWhereInput
}

enum FaceSource {
  Manual
  Scan
}

input FaceWhereInput {
  AND: [FaceWhereInput!]
  NOT: [FaceWhereInput!]
  OR: [FaceWhereInput!]
  addedBy: UserWhereInput
  addedById: IntNullableFilter
  appearance: AppearanceWhereInput
  appearanceId: IntNullableFilter
  createdAt: DateTimeFilter
  height: FloatFilter
  id: IntFilter
  image: ImageWhereInput
  imageId: IntFilter
  person: PersonWhereInput
  personId: IntNullableFilter
  score: FloatFilter
  source: EnumFaceSourceFilter
  updatedAt: DateTimeFilter
  width: FloatFilter
  x: FloatFilter
  y: FloatFilter
}

input FaceWhereUniqueInput {
  id: Int
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Image {
  appearances(cursor: AppearanceWhereUniqueInput, skip: Int, take: Int): [Appearance!]!
  bytes: Int!
  caption: String
  createdAt: DateTime!
  faceScanDate: DateTime

  """The name the image file was uploaded with."""
  fileName: String

  """Human readable file size. Use `bytes` for a number representation."""
  fileSize: String!

  """SHA256 checksum of the image."""
  hash: String!

  """Height of the image in pixels."""
  height: Int!
  id: Int!

  """( ͡° ͜ʖ ͡°)"""
  isNsfw: Boolean!

  """The IANA media type of the image."""
  mimetype: MimeType!

  """
  Block hash of the image, useful for doing reverse search using hamming distance.
  """
  pHash: String

  """Dominant colors in the image in decimal format, sorted by frequency."""
  palette: [Int!]!

  """The visibility status of the image."""
  public: Boolean!

  """Direct link to the image on the CDN"""
  rawUrl: String!

  """The unique url identifier of the image."""
  slug: String!

  """
  The url the image was taken from (if applicable). Not guaranteed to be a direct image url.
  """
  source: String
  tags(cursor: TagWhereUniqueInput, skip: Int, take: Int): [Tag!]!
  unknownFaces: [Face!]!
  uploadType: UploadType!
  uploadedBy: User

  """Link to the image on the site"""
  url: String!
  views: Int!

  """Width of the image in pixels."""
  width: Int!
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  appearances: AppearanceListRelationFilter
  bytes: IntFilter
  caption: StringNullableFilter
  createdAt: DateTimeFilter
  faceScanDate: DateTimeNullableFilter
  faces: FaceListRelationFilter
  fileName: StringNullableFilter
  hash: StringFilter
  height: IntFilter
  id: IntFilter
  isNsfw: BoolFilter
  mimetype: EnumMimeTypeFilter
  pHash: StringNullableFilter
  palette: IntNullableListFilter
  public: BoolFilter
  slug: StringFilter
  source: StringNullableFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
  uploadType: EnumUploadTypeFilter
  user: UserWhereInput
  userId: IntNullableFilter
  views: IntFilter
  width: IntFilter
}

input ImageWhereUniqueInput {
  id: Int
  slug: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableListFilter {
  equals: [Int!]
  has: Int
  hasEvery: [Int!]
  hasSome: [Int!]
  isEmpty: Boolean
}

enum MimeType {
  AVIF
  GIF
  JPG
  MP4
  PNG
  SVG
  WEBM
  WEBP
}

type Mutation {
  """Image face recognition update. Only available to bot accounts"""
  markFaces(faces: [FaceInput!]!, ireneBotId: Int, personName: String, replacePreviousScan: Boolean, slug: String!): Image

  """Image face recognition update. Only available to bot accounts"""
  test(slug: String!): Image
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumFaceSourceFilter {
  equals: FaceSource
  in: [FaceSource!]
  not: NestedEnumFaceSourceFilter
  notIn: [FaceSource!]
}

input NestedEnumMimeTypeFilter {
  equals: MimeType
  in: [MimeType!]
  not: NestedEnumMimeTypeFilter
  notIn: [MimeType!]
}

input NestedEnumTagSourceFilter {
  equals: TagSource
  in: [TagSource!]
  not: NestedEnumTagSourceFilter
  notIn: [TagSource!]
}

input NestedEnumUploadTypeFilter {
  equals: UploadType
  in: [UploadType!]
  not: NestedEnumUploadTypeFilter
  notIn: [UploadType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Person {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  aliases: AliasListRelationFilter
  appearances: AppearanceListRelationFilter
  appearsIn: FaceListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  ireneBotId: IntNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

type Query {
  image(slug: String!): Image
  me: User
  user(id: Int): User
}

enum QueryMode {
  default
  insensitive
}

type Role {
  createdAt: DateTime!
  name: String!
}

input RoleListRelationFilter {
  every: RoleWhereInput
  none: RoleWhereInput
  some: RoleWhereInput
}

input RoleUserRoleCompoundUniqueInput {
  name: String!
  userId: Int!
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input RoleWhereUniqueInput {
  id: Int
  userRole: RoleUserRoleCompoundUniqueInput
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  addedBy: User
  createdAt: DateTime!
  name: String!
  source: TagSource!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

enum TagSource {
  USER
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  addedBy: UserWhereInput
  addedById: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: ImageWhereInput
  imageId: IntFilter
  name: StringFilter
  source: EnumTagSourceFilter
  updatedAt: DateTimeFilter
}

input TagWhereUniqueInput {
  id: Int
}

enum UploadType {
  TOKEN
  WEBSITE
}

type User {
  avatar: String
  id: Int!
  images(cursor: ImageWhereUniqueInput, skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  name: String
  roles(cursor: RoleWhereUniqueInput, skip: Int, take: Int): [Role!]!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  bot: BoolFilter
  cratedTags: TagListRelationFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  images: ImageListRelationFilter
  markedFaces: FaceListRelationFilter
  name: StringNullableFilter
  roles: RoleListRelationFilter
  taggedAppearances: AppearanceListRelationFilter
  token: StringNullableFilter
  updatedAt: DateTimeFilter
}
